
/* THIS FILE IS AUTOGENERATED BY generate_quadrature_tests.py.
   DO NOT EDIT THIS FILE, EDIT THE AUTOGENERATOR INSTEAD.
*/

// clang-format off
#include "catch2/catch_all.hpp"
#include <integratorxx/quadratures/primitive/gausschebyshev2.hpp>
#include <numeric>
#include <vector>
#include "quad_matcher.hpp"
// clang-format on

const double x_tolerance = 10*std::numeric_limits<double>::epsilon();
const double w_tolerance = 10*std::numeric_limits<double>::epsilon();

TEST_CASE("2 point GaussChebyshev2", "[1d-quad]") {
std::array<double,2> ref_pts = {
    -0.50000000000000000000, 0.50000000000000000000
};
std::array<double,2> ref_wgt = {
    0.90689968211710892530, 0.90689968211710892530
};
IntegratorXX::GaussChebyshev2<double,double> quad(2);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 2; i++) {
    const std::string msg = "GaussChebyshev2 N = 2 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("3 point GaussChebyshev2", "[1d-quad]") {
std::array<double,3> ref_pts = {
    -0.70710678118654752440, 0, 0.70710678118654752440
};
std::array<double,3> ref_wgt = {
    0.55536036726979578088, 0.78539816339744830962, 0.55536036726979578088
};
IntegratorXX::GaussChebyshev2<double,double> quad(3);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 3; i++) {
    const std::string msg = "GaussChebyshev2 N = 3 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("4 point GaussChebyshev2", "[1d-quad]") {
std::array<double,4> ref_pts = {
    -0.80901699437494742410, -0.30901699437494742410, 0.30901699437494742410, 
    0.80901699437494742410
};
std::array<double,4> ref_wgt = {
    0.36931636609809135145, 0.59756643294831118888, 0.59756643294831118888, 
    0.36931636609809135145
};
IntegratorXX::GaussChebyshev2<double,double> quad(4);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 4; i++) {
    const std::string msg = "GaussChebyshev2 N = 4 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("5 point GaussChebyshev2", "[1d-quad]") {
std::array<double,5> ref_pts = {
    -0.86602540378443864676, -0.50000000000000000000, 0, 
    0.50000000000000000000, 0.86602540378443864676
};
std::array<double,5> ref_wgt = {
    0.26179938779914943654, 0.45344984105855446265, 0.52359877559829887308, 
    0.45344984105855446265, 0.26179938779914943654
};
IntegratorXX::GaussChebyshev2<double,double> quad(5);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 5; i++) {
    const std::string msg = "GaussChebyshev2 N = 5 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("6 point GaussChebyshev2", "[1d-quad]") {
std::array<double,6> ref_pts = {
    -0.90096886790241912624, -0.62348980185873353053, -0.22252093395631440429, 
    0.22252093395631440429, 0.62348980185873353053, 0.90096886790241912624
};
std::array<double,6> ref_wgt = {
    0.19472656676054157003, 0.35088514880953995377, 0.43754662381286459065, 
    0.43754662381286459065, 0.35088514880953995377, 0.19472656676054157003
};
IntegratorXX::GaussChebyshev2<double,double> quad(6);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 6; i++) {
    const std::string msg = "GaussChebyshev2 N = 6 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("9 point GaussChebyshev2", "[1d-quad]") {
std::array<double,9> ref_pts = {
    -0.95105651629515357212, -0.80901699437494742410, -0.58778525229247312917, 
    -0.30901699437494742410, 0, 0.30901699437494742410, 
    0.58778525229247312917, 0.80901699437494742410, 0.95105651629515357212
};
std::array<double,9> ref_wgt = {
    0.097080551936273328867, 0.18465818304904567573, 0.25416018461576299079, 
    0.29878321647415559444, 0.31415926535897932385, 0.29878321647415559444, 
    0.25416018461576299079, 0.18465818304904567573, 0.097080551936273328867
};
IntegratorXX::GaussChebyshev2<double,double> quad(9);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 9; i++) {
    const std::string msg = "GaussChebyshev2 N = 9 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("12 point GaussChebyshev2", "[1d-quad]") {
std::array<double,12> ref_pts = {
    -0.97094181742605202716, -0.88545602565320989590, -0.74851074817110109863, 
    -0.56806474673115580251, -0.35460488704253562597, -0.12053668025532305335, 
    0.12053668025532305335, 0.35460488704253562597, 0.56806474673115580251, 
    0.74851074817110109863, 0.88545602565320989590, 0.97094181742605202716
};
std::array<double,12> ref_wgt = {
    0.057833256370365593942, 0.11230545409581914170, 0.16025086704293979791, 
    0.19888308208572604061, 0.22595693530827926595, 0.23989899277075703131, 
    0.23989899277075703131, 0.22595693530827926595, 0.19888308208572604061, 
    0.16025086704293979791, 0.11230545409581914170, 0.057833256370365593942
};
IntegratorXX::GaussChebyshev2<double,double> quad(12);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 12; i++) {
    const std::string msg = "GaussChebyshev2 N = 12 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("15 point GaussChebyshev2", "[1d-quad]") {
std::array<double,15> ref_pts = {
    -0.98078528040323044913, -0.92387953251128675613, -0.83146961230254523708, 
    -0.70710678118654752440, -0.55557023301960222474, -0.38268343236508977173, 
    -0.19509032201612826785, 0, 0.19509032201612826785, 
    0.38268343236508977173, 0.55557023301960222474, 0.70710678118654752440, 
    0.83146961230254523708, 0.92387953251128675613, 0.98078528040323044913
};
std::array<double,15> ref_wgt = {
    0.038305895152020979162, 0.075139716235543283839, 0.10908596016297199507, 
    0.13884009181744894522, 0.16325867660580185533, 0.18140332200871443838, 
    0.19257673947898713645, 0.19634954084936207740, 0.19257673947898713645, 
    0.18140332200871443838, 0.16325867660580185533, 0.13884009181744894522, 
    0.10908596016297199507, 0.075139716235543283839, 0.038305895152020979162
};
IntegratorXX::GaussChebyshev2<double,double> quad(15);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 15; i++) {
    const std::string msg = "GaussChebyshev2 N = 15 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("18 point GaussChebyshev2", "[1d-quad]") {
std::array<double,18> ref_pts = {
    -0.98636130340272237360, -0.94581724170063467902, -0.87947375120648907139, 
    -0.78914050939639359922, -0.67728157162574107476, -0.54694815812242687471, 
    -0.40169542465296945752, -0.24548548714079914892, -0.082579345472332324600, 
    0.082579345472332324600, 0.24548548714079914892, 0.40169542465296945752, 
    0.54694815812242687471, 0.67728157162574107476, 0.78914050939639359922, 
    0.87947375120648907139, 0.94581724170063467902, 0.98636130340272237360
};
std::array<double,18> ref_wgt = {
    0.027215218718240820301, 0.053688077214628365721, 0.078696464918972850426, 
    0.10155821820670098891, 0.12164972804426650446, 0.13842295041795784759, 
    0.15142035554594812814, 0.16028740809805222648, 0.16478223799532961451, 
    0.16478223799532961451, 0.16028740809805222648, 0.15142035554594812814, 
    0.13842295041795784759, 0.12164972804426650446, 0.10155821820670098891, 
    0.078696464918972850426, 0.053688077214628365721, 0.027215218718240820301
};
IntegratorXX::GaussChebyshev2<double,double> quad(18);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 18; i++) {
    const std::string msg = "GaussChebyshev2 N = 18 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("21 point GaussChebyshev2", "[1d-quad]") {
std::array<double,21> ref_pts = {
    -0.98982144188093273238, -0.95949297361449738989, -0.90963199535451837141, 
    -0.84125353283118116886, -0.75574957435425828377, -0.65486073394528506406, 
    -0.54064081745559758211, -0.41541501300188642553, -0.28173255684142969771, 
    -0.14231483827328514044, 0, 0.14231483827328514044, 
    0.28173255684142969771, 0.41541501300188642553, 0.54064081745559758211, 
    0.65486073394528506406, 0.75574957435425828377, 0.84125353283118116886, 
    0.90963199535451837141, 0.95949297361449738989, 0.98982144188093273238
};
std::array<double,21> ref_wgt = {
    0.020322511382553278761, 0.040231315038641108247, 0.059321125138074310700, 
    0.077203328197694809829, 0.093513894131223986102, 0.10792078685204322875, 
    0.12013072357040448613, 0.12989514518527181120, 0.13701527623083319648, 
    0.14134617137176339848, 0.14279966607226332902, 0.14134617137176339848, 
    0.13701527623083319648, 0.12989514518527181120, 0.12013072357040448613, 
    0.10792078685204322875, 0.093513894131223986102, 0.077203328197694809829, 
    0.059321125138074310700, 0.040231315038641108247, 0.020322511382553278761
};
IntegratorXX::GaussChebyshev2<double,double> quad(21);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 21; i++) {
    const std::string msg = "GaussChebyshev2 N = 21 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("26 point GaussChebyshev2", "[1d-quad]") {
std::array<double,26> ref_pts = {
    -0.99323835774194298855, -0.97304487057982383883, -0.93969262078590838405, 
    -0.89363264032341224819, -0.83548781141293641965, -0.76604444311897803520, 
    -0.68624163786873358573, -0.59715859170278616485, -0.50000000000000000000, 
    -0.39607976603915682370, -0.28680323271109025310, -0.17364817766693034885, 
    -0.058144828910475828539, 0.058144828910475828539, 0.17364817766693034885, 
    0.28680323271109025310, 0.39607976603915682370, 0.50000000000000000000, 
    0.59715859170278616485, 0.68624163786873358573, 0.76604444311897803520, 
    0.83548781141293641965, 0.89363264032341224819, 0.93969262078590838405, 
    0.97304487057982383883, 0.99323835774194298855
};
std::array<double,26> ref_wgt = {
    0.013508023931468667677, 0.026833375012061607450, 0.039795850727838853555, 
    0.052220155831662731523, 0.063938272910699223478, 0.074791734533695383946, 
    0.084633766251138711176, 0.093331271467897600719, 0.10076663134634543614, 
    0.10683929539936626840, 0.11146714126320031863, 0.11458758526153423750, 
    0.11615842874236195500, 0.11615842874236195500, 0.11458758526153423750, 
    0.11146714126320031863, 0.10683929539936626840, 0.10076663134634543614, 
    0.093331271467897600719, 0.084633766251138711176, 0.074791734533695383946, 
    0.063938272910699223478, 0.052220155831662731523, 0.039795850727838853555, 
    0.026833375012061607450, 0.013508023931468667677
};
IntegratorXX::GaussChebyshev2<double,double> quad(26);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 26; i++) {
    const std::string msg = "GaussChebyshev2 N = 26 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("31 point GaussChebyshev2", "[1d-quad]") {
std::array<double,31> ref_pts = {
    -0.99518472667219688624, -0.98078528040323044913, -0.95694033573220886494, 
    -0.92387953251128675613, -0.88192126434835502971, -0.83146961230254523708, 
    -0.77301045336273696081, -0.70710678118654752440, -0.63439328416364549822, 
    -0.55557023301960222474, -0.47139673682599764856, -0.38268343236508977173, 
    -0.29028467725446236764, -0.19509032201612826785, -0.098017140329560601994, 
    0, 0.098017140329560601994, 0.19509032201612826785, 
    0.29028467725446236764, 0.38268343236508977173, 0.47139673682599764856, 
    0.55557023301960222474, 0.63439328416364549822, 0.70710678118654752440, 
    0.77301045336273696081, 0.83146961230254523708, 0.88192126434835502971, 
    0.92387953251128675613, 0.95694033573220886494, 0.98078528040323044913, 
    0.99518472667219688624
};
std::array<double,31> ref_wgt = {
    0.0096228102495383572675, 0.019152947576010489581, 0.028498631547259472672, 
    0.037569858117771641920, 0.046279266416836105004, 0.054542980081485997536, 
    0.062281415031725338013, 0.069420045908724472610, 0.075890123794765309960, 
    0.081629338302900927666, 0.086582417660044193517, 0.090701661004357219189, 
    0.093947397770626802662, 0.096288369739493568225, 0.097702032071191878125, 
    0.098174770424681038702, 0.097702032071191878125, 0.096288369739493568225, 
    0.093947397770626802662, 0.090701661004357219189, 0.086582417660044193517, 
    0.081629338302900927666, 0.075890123794765309960, 0.069420045908724472610, 
    0.062281415031725338013, 0.054542980081485997536, 0.046279266416836105004, 
    0.037569858117771641920, 0.028498631547259472672, 0.019152947576010489581, 
    0.0096228102495383572675
};
IntegratorXX::GaussChebyshev2<double,double> quad(31);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 31; i++) {
    const std::string msg = "GaussChebyshev2 N = 31 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("36 point GaussChebyshev2", "[1d-quad]") {
std::array<double,36> ref_pts = {
    -0.99639748854252650165, -0.98561591034770846226, -0.96773294693349883869, 
    -0.94287744546108417004, -0.91122849038813570283, -0.87301411316118815875, 
    -0.82850964924384212353, -0.77803575431843950714, -0.72195609395452446235, 
    -0.66067472339008144191, -0.59463317630428661613, -0.52430728355723168780, 
    -0.45020374481767329246, -0.37285647778030861083, -0.29282277127655037995, 
    -0.21067926999572632036, -0.12701781974687874737, -0.042441203196148305878, 
    0.042441203196148305878, 0.12701781974687874737, 0.21067926999572632036, 
    0.29282277127655037995, 0.37285647778030861083, 0.45020374481767329246, 
    0.52430728355723168780, 0.59463317630428661613, 0.66067472339008144191, 
    0.72195609395452446235, 0.77803575431843950714, 0.82850964924384212353, 
    0.87301411316118815875, 0.91122849038813570283, 0.94287744546108417004, 
    0.96773294693349883869, 0.98561591034770846226, 0.99639748854252650165
};
std::array<double,36> ref_wgt = {
    0.0072006937652202841618, 0.014349506366858640207, 0.021394930446305601924, 
    0.028286203561623234604, 0.034973673932102516527, 0.041409158180481115384, 
    0.047546288495280682921, 0.053340846711951072379, 0.058751082905759179197, 
    0.063738016200953340344, 0.068265715628866369755, 0.072301559011368161645, 
    0.075816468004406653407, 0.078785117608143049432, 0.081186118634155980668, 
    0.083002171815034212693, 0.084220192445994755464, 0.084831404660480660070, 
    0.084831404660480660070, 0.084220192445994755464, 0.083002171815034212693, 
    0.081186118634155980668, 0.078785117608143049432, 0.075816468004406653407, 
    0.072301559011368161645, 0.068265715628866369755, 0.063738016200953340344, 
    0.058751082905759179197, 0.053340846711951072379, 0.047546288495280682921, 
    0.041409158180481115384, 0.034973673932102516527, 0.028286203561623234604, 
    0.021394930446305601924, 0.014349506366858640207, 0.0072006937652202841618
};
IntegratorXX::GaussChebyshev2<double,double> quad(36);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 36; i++) {
    const std::string msg = "GaussChebyshev2 N = 36 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("41 point GaussChebyshev2", "[1d-quad]") {
std::array<double,41> ref_pts = {
    -0.99720379718118014823, -0.98883082622512854507, -0.97492791218182360702, 
    -0.95557280578614073281, -0.93087374864420425564, -0.90096886790241912624, 
    -0.86602540378443864676, -0.82623877431599487195, -0.78183148246802980871, 
    -0.73305187182982632852, -0.68017273777091939019, -0.62348980185873353053, 
    -0.56332005806362202775, -0.50000000000000000000, -0.43388373911755812048, 
    -0.36534102436639501454, -0.29475517441090421683, -0.22252093395631440429, 
    -0.14904226617617444693, -0.074730093586424254291, 0, 
    0.074730093586424254291, 0.14904226617617444693, 0.22252093395631440429, 
    0.29475517441090421683, 0.36534102436639501454, 0.43388373911755812048, 
    0.50000000000000000000, 0.56332005806362202775, 0.62348980185873353053, 
    0.68017273777091939019, 0.73305187182982632852, 0.78183148246802980871, 
    0.82623877431599487195, 0.86602540378443864676, 0.90096886790241912624, 
    0.93087374864420425564, 0.95557280578614073281, 0.97492791218182360702, 
    0.98883082622512854507, 0.99720379718118014823
};
std::array<double,41> ref_wgt = {
    0.0055897979288854324221, 0.011148335440320099213, 0.016644526937788021375, 
    0.022047635488973211894, 0.027327444719153243421, 0.032454427793423595005, 
    0.037399912542735633791, 0.042136241810296445959, 0.046636928121608406495, 
    0.050876801813170886547, 0.054832151791448311843, 0.058480858134923325629, 
    0.061802515797670586489, 0.064778548722650637521, 0.067392313726556018911, 
    0.069629193575243424842, 0.071476678729236333217, 0.072924437302144098441, 
    0.073964372840761649916, 0.074590669603720040964, 0.074799825085471267582, 
    0.074590669603720040964, 0.073964372840761649916, 0.072924437302144098441, 
    0.071476678729236333217, 0.069629193575243424842, 0.067392313726556018911, 
    0.064778548722650637521, 0.061802515797670586489, 0.058480858134923325629, 
    0.054832151791448311843, 0.050876801813170886547, 0.046636928121608406495, 
    0.042136241810296445959, 0.037399912542735633791, 0.032454427793423595005, 
    0.027327444719153243421, 0.022047635488973211894, 0.016644526937788021375, 
    0.011148335440320099213, 0.0055897979288854324221
};
IntegratorXX::GaussChebyshev2<double,double> quad(41);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 41; i++) {
    const std::string msg = "GaussChebyshev2 N = 41 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("46 point GaussChebyshev2", "[1d-quad]") {
std::array<double,46> ref_pts = {
    -0.99776687862315315956, -0.99107748815478009891, -0.97996170503658681679, 
    -0.96446917505437657452, -0.94466909160791880067, -0.92064988667642876747, 
    -0.89251883585988122582, -0.86040157926013936987, -0.82444156034176031724, 
    -0.78479938527866096605, -0.74165210564795754011, -0.69519242767464226355, 
    -0.64562785155880239765, -0.59317974472935521110, -0.53808235316337267444, 
    -0.48058175518668378052, -0.42093476242833496963, -0.35940777283751283660, 
    -0.29627558088563397732, -0.23182015026752826926, -0.16632935458313003286, 
    -0.10009569162409834512, -0.033414977007674570875, 0.033414977007674570875, 
    0.10009569162409834512, 0.16632935458313003286, 0.23182015026752826926, 
    0.29627558088563397732, 0.35940777283751283660, 0.42093476242833496963, 
    0.48058175518668378052, 0.53808235316337267444, 0.59317974472935521110, 
    0.64562785155880239765, 0.69519242767464226355, 0.74165210564795754011, 
    0.78479938527866096605, 0.82444156034176031724, 0.86040157926013936987, 
    0.89251883585988122582, 0.92064988667642876747, 0.94466909160791880067, 
    0.96446917505437657452, 0.97996170503658681679, 0.99107748815478009891, 
    0.99776687862315315956
};
std::array<double,46> ref_wgt = {
    0.0044645797337784594118, 0.0089092195706726431156, 0.013314068670218244201, 
    0.017659453907043302992, 0.021925967735821842069, 0.026094554870082545402, 
    0.030146597387743880415, 0.034063997883273683474, 0.037829260295095478561, 
    0.041425568047246711390, 0.044836859156289284109, 0.048047897968026695646, 
    0.051044343203634194621, 0.053812812011291409085, 0.056340939737247313022, 
    0.058617435149365443790, 0.060632130866507611879, 0.062376028768526233386, 
    0.063841340184053236030, 0.065021520676597117706, 0.065911299273585003663, 
    0.066506702007805705026, 0.066805069666111979182, 0.066805069666111979182, 
    0.066506702007805705026, 0.065911299273585003663, 0.065021520676597117706, 
    0.063841340184053236030, 0.062376028768526233386, 0.060632130866507611879, 
    0.058617435149365443790, 0.056340939737247313022, 0.053812812011291409085, 
    0.051044343203634194621, 0.048047897968026695646, 0.044836859156289284109, 
    0.041425568047246711390, 0.037829260295095478561, 0.034063997883273683474, 
    0.030146597387743880415, 0.026094554870082545402, 0.021925967735821842069, 
    0.017659453907043302992, 0.013314068670218244201, 0.0089092195706726431156, 
    0.0044645797337784594118
};
IntegratorXX::GaussChebyshev2<double,double> quad(46);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 46; i++) {
    const std::string msg = "GaussChebyshev2 N = 46 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("53 point GaussChebyshev2", "[1d-quad]") {
std::array<double,53> ref_pts = {
    -0.99830815827126820805, -0.99323835774194298855, -0.98480775301220805937, 
    -0.97304487057982383883, -0.95798951231548887444, -0.93969262078590838405, 
    -0.91821610688027401476, -0.89363264032341224819, -0.86602540378443864676, 
    -0.83548781141293641965, -0.80212319275504378508, -0.76604444311897803520, 
    -0.72737364157304869599, -0.68624163786873358573, -0.64278760968653932632, 
    -0.59715859170278616485, -0.54950897807080603526, -0.50000000000000000000, 
    -0.44879918020046217278, -0.39607976603915682370, -0.34202014332566873304, 
    -0.28680323271109025310, -0.23061587074244017845, -0.17364817766693034885, 
    -0.11609291412523022968, -0.058144828910475828539, 0, 
    0.058144828910475828539, 0.11609291412523022968, 0.17364817766693034885, 
    0.23061587074244017845, 0.28680323271109025310, 0.34202014332566873304, 
    0.39607976603915682370, 0.44879918020046217278, 0.50000000000000000000, 
    0.54950897807080603526, 0.59715859170278616485, 0.64278760968653932632, 
    0.68624163786873358573, 0.72737364157304869599, 0.76604444311897803520, 
    0.80212319275504378508, 0.83548781141293641965, 0.86602540378443864676, 
    0.89363264032341224819, 0.91821610688027401476, 0.93969262078590838405, 
    0.95798951231548887444, 0.97304487057982383883, 0.98480775301220805937, 
    0.99323835774194298855, 0.99830815827126820805
};
std::array<double,53> ref_wgt = {
    0.0033827290249886349003, 0.0067540119657343338384, 0.010102441467920066409, 
    0.013416687506030803725, 0.016685535720573426263, 0.019897925363919426778, 
    0.023042986726373688066, 0.026110077915831365762, 0.029088820866572159615, 
    0.031969136455349611739, 0.034741278605953701385, 0.037395867266847691973, 
    0.039923920150293346098, 0.042316883125569355588, 0.044566659163441956170, 
    0.046665635733948800359, 0.048606710564790660502, 0.050383315673172718072, 
    0.051989439589779295403, 0.053419647699683134198, 0.054669100631362022579, 
    0.055733570631600159313, 0.056609455870866772361, 0.057293792630767118751, 
    0.057784265332327389451, 0.058079214371180977501, 0.058177641733144319231, 
    0.058079214371180977501, 0.057784265332327389451, 0.057293792630767118751, 
    0.056609455870866772361, 0.055733570631600159313, 0.054669100631362022579, 
    0.053419647699683134198, 0.051989439589779295403, 0.050383315673172718072, 
    0.048606710564790660502, 0.046665635733948800359, 0.044566659163441956170, 
    0.042316883125569355588, 0.039923920150293346098, 0.037395867266847691973, 
    0.034741278605953701385, 0.031969136455349611739, 0.029088820866572159615, 
    0.026110077915831365762, 0.023042986726373688066, 0.019897925363919426778, 
    0.016685535720573426263, 0.013416687506030803725, 0.010102441467920066409, 
    0.0067540119657343338384, 0.0033827290249886349003
};
IntegratorXX::GaussChebyshev2<double,double> quad(53);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 53; i++) {
    const std::string msg = "GaussChebyshev2 N = 53 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("60 point GaussChebyshev2", "[1d-quad]") {
std::array<double,60> ref_pts = {
    -0.99867408988483050761, -0.99469987561458904798, -0.98808789609107714930, 
    -0.97885568509535784755, -0.96702772479132034919, -0.95263538080338254732, 
    -0.93571681904049365305, -0.91631690448700473475, -0.89448708222879558203, 
    -0.87028524103015521819, -0.84377555982318564924, -0.81502833751681135428, 
    -0.78411980657671042880, -0.75113193087051989087, -0.71615218831439332449, 
    -0.67927333889729311559, -0.64059317869817515558, -0.60021428054836821829, 
    -0.55824372202686475915, -0.51479280150983072731, -0.46997674302732004488, 
    -0.42391439070986068874, -0.37672789363518509944, -0.32854238191083473302, 
    -0.27948563485160945814, -0.22968774213179555086, -0.17928075881073566417, 
    -0.12839835514655094445, -0.077175462126646351235, -0.025747913654988557094, 
    0.025747913654988557094, 0.077175462126646351235, 0.12839835514655094445, 
    0.17928075881073566417, 0.22968774213179555086, 0.27948563485160945814, 
    0.32854238191083473302, 0.37672789363518509944, 0.42391439070986068874, 
    0.46997674302732004488, 0.51479280150983072731, 0.55824372202686475915, 
    0.60021428054836821829, 0.64059317869817515558, 0.67927333889729311559, 
    0.71615218831439332449, 0.75113193087051989087, 0.78411980657671042880, 
    0.81502833751681135428, 0.84377555982318564924, 0.87028524103015521819, 
    0.89448708222879558203, 0.91631690448700473475, 0.93571681904049365305, 
    0.95263538080338254732, 0.96702772479132034919, 0.97885568509535784755, 
    0.98808789609107714930, 0.99469987561458904798, 0.99867408988483050761
};
std::array<double,60> ref_wgt = {
    0.0026512340623355933510, 0.0052954375285493213661, 0.0079255984463963460155, 
    0.010534742101945673607, 0.013115949515267657821, 0.015662375788324950459, 
    0.018167268256411591489, 0.020623984395005885005, 0.023026009434551306388, 
    0.025366973636454208288, 0.027640669184485485235, 0.029841066646793236204, 
    0.031962330964872126937, 0.033998836927089579600, 0.035945184085735779993, 
    0.037796211078040167319, 0.039547009313177645280, 0.041192935988969034521, 
    0.042729626403757816841, 0.044153005530814287340, 0.045459298824573875427, 
    0.046645042230053433280, 0.047707091368902319164, 0.048642629877728519506, 
    0.049449176876588067823, 0.050124593547832669170, 0.050667088807869608897, 
    0.051075224056793458039, 0.051347916993294405897, 0.051484444484726768711, 
    0.051484444484726768711, 0.051347916993294405897, 0.051075224056793458039, 
    0.050667088807869608897, 0.050124593547832669170, 0.049449176876588067823, 
    0.048642629877728519506, 0.047707091368902319164, 0.046645042230053433280, 
    0.045459298824573875427, 0.044153005530814287340, 0.042729626403757816841, 
    0.041192935988969034521, 0.039547009313177645280, 0.037796211078040167319, 
    0.035945184085735779993, 0.033998836927089579600, 0.031962330964872126937, 
    0.029841066646793236204, 0.027640669184485485235, 0.025366973636454208288, 
    0.023026009434551306388, 0.020623984395005885005, 0.018167268256411591489, 
    0.015662375788324950459, 0.013115949515267657821, 0.010534742101945673607, 
    0.0079255984463963460155, 0.0052954375285493213661, 0.0026512340623355933510
};
IntegratorXX::GaussChebyshev2<double,double> quad(60);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 60; i++) {
    const std::string msg = "GaussChebyshev2 N = 60 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("67 point GaussChebyshev2", "[1d-quad]") {
std::array<double,67> ref_pts = {
    -0.99893297480237244441, -0.99573417629503452187, -0.99041043087520515835, 
    -0.98297309968390177828, -0.97343805436069282581, -0.96182564317281907041, 
    -0.94816064759096585893, -0.93247222940435580457, -0.91479386848802097000, 
    -0.89516329135506232207, -0.87362239064636953713, -0.85021713572961415213, 
    -0.82499747459830231554, -0.79801722728023950333, -0.76933397098287890812, 
    -0.73900891722065911592, -0.70710678118654752440, -0.67369564364655721171, 
    -0.63884680565196131707, -0.60263463637925638918, -0.56513641442259188898, 
    -0.52643216287735580024, -0.48660447856685628729, -0.44573835577653826740, 
    -0.40392100487189496264, -0.36124166618715294874, -0.31779141958190162617, 
    -0.27366299007208286354, -0.22895054995013407691, -0.18374951781657033157, 
    -0.13815635495188219823, -0.092268359463301995240, -0.046183458645739591949, 
    0, 0.046183458645739591949, 0.092268359463301995240, 
    0.13815635495188219823, 0.18374951781657033157, 0.22895054995013407691, 
    0.27366299007208286354, 0.31779141958190162617, 0.36124166618715294874, 
    0.40392100487189496264, 0.44573835577653826740, 0.48660447856685628729, 
    0.52643216287735580024, 0.56513641442259188898, 0.60263463637925638918, 
    0.63884680565196131707, 0.67369564364655721171, 0.70710678118654752440, 
    0.73900891722065911592, 0.76933397098287890812, 0.79801722728023950333, 
    0.82499747459830231554, 0.85021713572961415213, 0.87362239064636953713, 
    0.89516329135506232207, 0.91479386848802097000, 0.93247222940435580457, 
    0.94816064759096585893, 0.96182564317281907041, 0.97343805436069282581, 
    0.98297309968390177828, 0.99041043087520515835, 0.99573417629503452187, 
    0.99893297480237244441
};
std::array<double,67> ref_wgt = {
    0.0021336707999826988749, 0.0042627882389513503811, 0.0063828086729937789188, 
    0.0084892078716647673311, 0.010577490672921826745, 0.012643200576027530083, 
    0.014681929251946672221, 0.016689325950942589984, 0.018661106787296357329, 
    0.020593063881334797044, 0.022481074339257760481, 0.024321109051601271357, 
    0.026109241291560169878, 0.027841655094821003348, 0.029514653403022177575, 
    0.031124665953462814713, 0.032668256898223281228, 0.034142132136437798837, 
    0.035543146344071699128, 0.036868309686201422950, 0.038114794197472920780, 
    0.039279939817122234305, 0.040361260065679221146, 0.041356447351240050911, 
    0.042263377893984619648, 0.043080116258429714379, 0.043804919483745871037, 
    0.044436240803323621497, 0.044972732945651387884, 0.045413251009460784365, 
    0.045756854907003621482, 0.046002811370246536747, 0.046150595515701931067, 
    0.046199891964555782919, 0.046150595515701931067, 0.046002811370246536747, 
    0.045756854907003621482, 0.045413251009460784365, 0.044972732945651387884, 
    0.044436240803323621497, 0.043804919483745871037, 0.043080116258429714379, 
    0.042263377893984619648, 0.041356447351240050911, 0.040361260065679221146, 
    0.039279939817122234305, 0.038114794197472920780, 0.036868309686201422950, 
    0.035543146344071699128, 0.034142132136437798837, 0.032668256898223281228, 
    0.031124665953462814713, 0.029514653403022177575, 0.027841655094821003348, 
    0.026109241291560169878, 0.024321109051601271357, 0.022481074339257760481, 
    0.020593063881334797044, 0.018661106787296357329, 0.016689325950942589984, 
    0.014681929251946672221, 0.012643200576027530083, 0.010577490672921826745, 
    0.0084892078716647673311, 0.0063828086729937789188, 0.0042627882389513503811, 
    0.0021336707999826988749
};
IntegratorXX::GaussChebyshev2<double,double> quad(67);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 67; i++) {
    const std::string msg = "GaussChebyshev2 N = 67 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("74 point GaussChebyshev2", "[1d-quad]") {
std::array<double,74> ref_pts = {
    -0.99912283009885835015, -0.99649285924950433832, -0.99211470131447783105, 
    -0.98599603707050492781, -0.97814760073380563793, -0.96858316112863111949, 
    -0.95731949753206726492, -0.94437637023748105567, -0.92977648588825140366, 
    -0.91354545764260089550, -0.89571176023941286035, -0.87630668004386358731, 
    -0.85536426016050662785, -0.83292124071009948428, -0.80901699437494742410, 
    -0.78369345732583978928, -0.75699505565175642512, -0.72896862742141152315, 
    -0.69966334051336541372, -0.66913060635885821383, -0.63742398974868971018, 
    -0.60459911486237485817, -0.57071356768443168945, -0.53582679497899661827, 
    -0.50000000000000000000, -0.46329603511986173188, -0.42577929156507264886, 
    -0.38751558645210297288, -0.34857204732181521764, -0.30901699437494742410, 
    -0.26891982061526570577, -0.22835087011065574178, -0.18738131458572463054, 
    -0.14608302856241161438, -0.10452846326765347140, -0.062790519529313376076, 
    -0.020942419883356959456, 0.020942419883356959456, 0.062790519529313376076, 
    0.10452846326765347140, 0.14608302856241161438, 0.18738131458572463054, 
    0.22835087011065574178, 0.26891982061526570577, 0.30901699437494742410, 
    0.34857204732181521764, 0.38751558645210297288, 0.42577929156507264886, 
    0.46329603511986173188, 0.50000000000000000000, 0.53582679497899661827, 
    0.57071356768443168945, 0.60459911486237485817, 0.63742398974868971018, 
    0.66913060635885821383, 0.69966334051336541372, 0.72896862742141152315, 
    0.75699505565175642512, 0.78369345732583978928, 0.80901699437494742410, 
    0.83292124071009948428, 0.85536426016050662785, 0.87630668004386358731, 
    0.89571176023941286035, 0.91354545764260089550, 0.92977648588825140366, 
    0.94437637023748105567, 0.95731949753206726492, 0.96858316112863111949, 
    0.97814760073380563793, 0.98599603707050492781, 0.99211470131447783105, 
    0.99649285924950433832, 0.99912283009885835015
};
std::array<double,74> ref_wgt = {
    0.0017540832815989811361, 0.0035050893050805334742, 0.0052499462108836255203, 
    0.0069855929270891180290, 0.0087089845395800693974, 0.010417097633855765553, 
    0.012106935599128117356, 0.013775533885395238095, 0.015419965204269507657, 
    0.017037344664436103689, 0.018624834832732660457, 0.020179650711971201896, 
    0.021699064626769557728, 0.023180411008820854113, 0.024621091073206090097, 
    0.026018577377545958594, 0.027370418255993610379, 0.028674242120289631117, 
    0.029927761620333719480, 0.031128777656974009861, 0.032275183239974243660, 
    0.033364967184390603777, 0.034396217638873511299, 0.035367125439704544120, 
    0.036275987284684357012, 0.037121208721303525256, 0.037901306943954044773, 
    0.038614913395274229297, 0.039260776167063361689, 0.039837762196554079258, 
    0.040344859254189485033, 0.040781177719417748473, 0.041145952141388848474, 
    0.041438542581815466250, 0.041658435737642193786, 0.041805245841553514570, 
    0.041878715338740759624, 0.041878715338740759624, 0.041805245841553514570, 
    0.041658435737642193786, 0.041438542581815466250, 0.041145952141388848474, 
    0.040781177719417748473, 0.040344859254189485033, 0.039837762196554079258, 
    0.039260776167063361689, 0.038614913395274229297, 0.037901306943954044773, 
    0.037121208721303525256, 0.036275987284684357012, 0.035367125439704544120, 
    0.034396217638873511299, 0.033364967184390603777, 0.032275183239974243660, 
    0.031128777656974009861, 0.029927761620333719480, 0.028674242120289631117, 
    0.027370418255993610379, 0.026018577377545958594, 0.024621091073206090097, 
    0.023180411008820854113, 0.021699064626769557728, 0.020179650711971201896, 
    0.018624834832732660457, 0.017037344664436103689, 0.015419965204269507657, 
    0.013775533885395238095, 0.012106935599128117356, 0.010417097633855765553, 
    0.0087089845395800693974, 0.0069855929270891180290, 0.0052499462108836255203, 
    0.0035050893050805334742, 0.0017540832815989811361
};
IntegratorXX::GaussChebyshev2<double,double> quad(74);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 74; i++) {
    const std::string msg = "GaussChebyshev2 N = 74 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("81 point GaussChebyshev2", "[1d-quad]") {
std::array<double,81> ref_pts = {
    -0.99926618105081002039, -0.99706580118374046214, -0.99340208975967506880, 
    -0.98828042378034852632, -0.98170831999685493768, -0.97369542387777904436, 
    -0.96425349545314098385, -0.95339639205493054595, -0.94114004797956157414, 
    -0.92750245110209466461, -0.91250361647655001597, -0.89616555696105561114, 
    -0.87851225091094237703, -0.85956960698720116004, -0.83936542613194995964, 
    -0.81792936076671766530, -0.79529287127342644197, -0.77148917982194292363, 
    -0.74655322161196265054, -0.72052159360078700864, -0.69343250079224172863, 
    -0.66532570016556536356, -0.63624244232655983326, -0.60622541096663801827, 
    -0.57531866021862059959, -0.54356755000122115073, -0.51101867944711036626, 
    -0.47771981851226292267, -0.44371983786695968600, -0.40906863717133988836, 
    -0.37381707184076879139, -0.33801687840850275828, -0.30172059859519231597, 
    -0.26498150219666168233, -0.22785350890313757560, -0.19039110916466836871, 
    -0.15264928421887449854, -0.11468342539840043433, -0.076549252836495646867, 
    -0.038302733690035348803, 0, 0.038302733690035348803, 
    0.076549252836495646867, 0.11468342539840043433, 0.15264928421887449854, 
    0.19039110916466836871, 0.22785350890313757560, 0.26498150219666168233, 
    0.30172059859519231597, 0.33801687840850275828, 0.37381707184076879139, 
    0.40906863717133988836, 0.44371983786695968600, 0.47771981851226292267, 
    0.51101867944711036626, 0.54356755000122115073, 0.57531866021862059959, 
    0.60622541096663801827, 0.63624244232655983326, 0.66532570016556536356, 
    0.69343250079224172863, 0.72052159360078700864, 0.74655322161196265054, 
    0.77148917982194292363, 0.79529287127342644197, 0.81792936076671766530, 
    0.83936542613194995964, 0.85956960698720116004, 0.87851225091094237703, 
    0.89616555696105561114, 0.91250361647655001597, 0.92750245110209466461, 
    0.94114004797956157414, 0.95339639205493054595, 0.96425349545314098385, 
    0.97369542387777904436, 0.98170831999685493768, 0.98828042378034852632, 
    0.99340208975967506880, 0.99706580118374046214, 0.99926618105081002039
};
std::array<double,81> ref_wgt = {
    0.0014674583752807478589, 0.0029327630530356386122, 0.0043937634965869257476, 
    0.0058483154863141034661, 0.0072942842665918841849, 0.0087295476788384579884, 
    0.010151999276075853667, 0.011559551414431354511, 0.012950138317042764238, 
    0.014321719105870819540, 0.015672280796969146484, 0.016999841254815789038, 
    0.018302452101370420818, 0.019578201575587797446, 0.020825217339190719193, 
    0.022041669224584645186, 0.023225771920881015545, 0.024375787594087171822, 
    0.025490028437617385720, 0.026566859149381769443, 0.027604699331817598115, 
    0.028602025811340667343, 0.029557374873812571206, 0.030469344412743044175, 
    0.031336595987074583789, 0.032157856785529271399, 0.032931921494634841117, 
    0.033657654067688411152, 0.034333989392061679282, 0.034959934852400582195, 
    0.035534571787425207629, 0.036057056838191904539, 0.036526623185838830746, 
    0.036942581676998375761, 0.037304321835224760891, 0.037611312756952407129, 
    0.037863103890670128387, 0.038059325698167604481, 0.038199690196883663497, 
    0.038283991382560402644, 0.038312105531582844371, 0.038283991382560402644, 
    0.038199690196883663497, 0.038059325698167604481, 0.037863103890670128387, 
    0.037611312756952407129, 0.037304321835224760891, 0.036942581676998375761, 
    0.036526623185838830746, 0.036057056838191904539, 0.035534571787425207629, 
    0.034959934852400582195, 0.034333989392061679282, 0.033657654067688411152, 
    0.032931921494634841117, 0.032157856785529271399, 0.031336595987074583789, 
    0.030469344412743044175, 0.029557374873812571206, 0.028602025811340667343, 
    0.027604699331817598115, 0.026566859149381769443, 0.025490028437617385720, 
    0.024375787594087171822, 0.023225771920881015545, 0.022041669224584645186, 
    0.020825217339190719193, 0.019578201575587797446, 0.018302452101370420818, 
    0.016999841254815789038, 0.015672280796969146484, 0.014321719105870819540, 
    0.012950138317042764238, 0.011559551414431354511, 0.010151999276075853667, 
    0.0087295476788384579884, 0.0072942842665918841849, 0.0058483154863141034661, 
    0.0043937634965869257476, 0.0029327630530356386122, 0.0014674583752807478589
};
IntegratorXX::GaussChebyshev2<double,double> quad(81);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 81; i++) {
    const std::string msg = "GaussChebyshev2 N = 81 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("90 point GaussChebyshev2", "[1d-quad]") {
std::array<double,90> ref_pts = {
    -0.99940414055107045870, -0.99761727230124759203, -0.99464152469519269829, 
    -0.99048044398756317202, -0.98513898901687381217, -0.97862352529595525258, 
    -0.97094181742605202716, -0.96210301984360053241, -0.95211766591071412696, 
    -0.94099765536237644305, -0.92875624012530232704, -0.91540800852536634027, 
    -0.90096886790241912624, -0.88545602565320989590, -0.86888796872500653870, 
    -0.85128444158435119967, -0.83266642268720637305, -0.81305609947853248384, 
    -0.79247684195109043327, -0.77095317479497958281, -0.74851074817110109863, 
    -0.72517630714337647253, -0.70097765980614942224, -0.67594364414475434862, 
    -0.65010409366874423641, -0.62348980185873353053, -0.59613248546922535693, 
    -0.56806474673115580251, -0.53932003449919919621, -0.50993260439013588184, 
    -0.47993747795978634314, -0.44937040096716130012, -0.41826780077556517761, 
    -0.38666674294141885623, -0.35460488704253562597, -0.32212044179849062067, 
    -0.28925211953656763736, -0.25603909005754713206, -0.22252093395631440429, 
    -0.18873759545291668381, -0.15472933479028124006, -0.12053668025532305335, 
    -0.086200379880619400404, -0.051761352884209381468, -0.017260640905388497482, 
    0.017260640905388497482, 0.051761352884209381468, 0.086200379880619400404, 
    0.12053668025532305335, 0.15472933479028124006, 0.18873759545291668381, 
    0.22252093395631440429, 0.25603909005754713206, 0.28925211953656763736, 
    0.32212044179849062067, 0.35460488704253562597, 0.38666674294141885623, 
    0.41826780077556517761, 0.44937040096716130012, 0.47993747795978634314, 
    0.50993260439013588184, 0.53932003449919919621, 0.56806474673115580251, 
    0.59613248546922535693, 0.62348980185873353053, 0.65010409366874423641, 
    0.67594364414475434862, 0.70097765980614942224, 0.72517630714337647253, 
    0.74851074817110109863, 0.77095317479497958281, 0.79247684195109043327, 
    0.81305609947853248384, 0.83266642268720637305, 0.85128444158435119967, 
    0.86888796872500653870, 0.88545602565320989590, 0.90096886790241912624, 
    0.91540800852536634027, 0.92875624012530232704, 0.94099765536237644305, 
    0.95211766591071412696, 0.96210301984360053241, 0.97094181742605202716, 
    0.97862352529595525258, 0.98513898901687381217, 0.99048044398756317202, 
    0.99464152469519269829, 0.99761727230124759203, 0.99940414055107045870
};
std::array<double,90> ref_wgt = {
    0.0011916005342584552293, 0.0023817810156415356780, 0.0035691230835777141095, 
    0.0047522117600864078973, 0.0059296371360339785399, 0.0070999960513490904827, 
    0.0082618937671950848488, 0.0094139456281066086645, 0.010554778712109699943, 
    0.011683033466858849343, 0.012797365329841222939, 0.013896446330717218117, 
    0.014978966673887813079, 0.016043636299402734529, 0.017089186420349279781, 
    0.018114371034889657988, 0.019117968411144927002, 0.020098782543155961628, 
    0.021055644576186357062, 0.021987414199668707120, 0.022892981006134256844, 
    0.023771265814506467339, 0.024621221956181498899, 0.025441836522362965998, 
    0.026232131571164491748, 0.026991165293041534906, 0.027718033133163622283, 
    0.028411868869389434373, 0.029071845644560100908, 0.029697176951880502909, 
    0.030287117572214283727, 0.030840964462175576885, 0.031358057591959095030, 
    0.031837780731910122045, 0.032279562186897037993, 0.032682875477611211285, 
    0.033047239967982340106, 0.033372221437961540389, 0.033657432600989583896, 
    0.033902533565533609741, 0.034107232240142287318, 0.034271284681536718759, 
    0.034394495385322254402, 0.034476717518974774505, 0.034517853096823783065, 
    0.034517853096823783065, 0.034476717518974774505, 0.034394495385322254402, 
    0.034271284681536718759, 0.034107232240142287318, 0.033902533565533609741, 
    0.033657432600989583896, 0.033372221437961540389, 0.033047239967982340106, 
    0.032682875477611211285, 0.032279562186897037993, 0.031837780731910122045, 
    0.031358057591959095030, 0.030840964462175576885, 0.030287117572214283727, 
    0.029697176951880502909, 0.029071845644560100908, 0.028411868869389434373, 
    0.027718033133163622283, 0.026991165293041534906, 0.026232131571164491748, 
    0.025441836522362965998, 0.024621221956181498899, 0.023771265814506467339, 
    0.022892981006134256844, 0.021987414199668707120, 0.021055644576186357062, 
    0.020098782543155961628, 0.019117968411144927002, 0.018114371034889657988, 
    0.017089186420349279781, 0.016043636299402734529, 0.014978966673887813079, 
    0.013896446330717218117, 0.012797365329841222939, 0.011683033466858849343, 
    0.010554778712109699943, 0.0094139456281066086645, 0.0082618937671950848488, 
    0.0070999960513490904827, 0.0059296371360339785399, 0.0047522117600864078973, 
    0.0035691230835777141095, 0.0023817810156415356780, 0.0011916005342584552293
};
IntegratorXX::GaussChebyshev2<double,double> quad(90);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 90; i++) {
    const std::string msg = "GaussChebyshev2 N = 90 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("99 point GaussChebyshev2", "[1d-quad]") {
std::array<double,99> ref_pts = {
    -0.99950656036573155700, -0.99802672842827156195, -0.99556196460308001290, 
    -0.99211470131447783105, -0.98768834059513772619, -0.98228725072868868109, 
    -0.97591676193874739896, -0.96858316112863111949, -0.96029368567694307175, 
    -0.95105651629515357212, -0.94088076895422547232, -0.92977648588825140366, 
    -0.91775462568398114115, -0.90482705246601952771, -0.89100652418836786236, 
    -0.87630668004386358731, -0.86074202700394363716, -0.84432792550201507855, 
    -0.82708057427456182492, -0.80901699437494742410, -0.79015501237569036516, 
    -0.77051324277578923080, -0.75011106963045954151, -0.72896862742141152315, 
    -0.70710678118654752440, -0.68454710592868867373, -0.66131186532365187657, 
    -0.63742398974868971018, -0.61290705365297649336, -0.58778525229247312917, 
    -0.56208337785213060010, -0.53582679497899661827, -0.50904141575037130028, 
    -0.48175367410171527499, -0.45399049973954679156, -0.42577929156507264886, 
    -0.39714789063478061375, -0.36812455268467795916, -0.33873792024529138122, 
    -0.30901699437494742410, -0.27899110603922925185, -0.24868988716485478824, 
    -0.21814324139654255202, -0.18738131458572463054, -0.15643446504023086901, 
    -0.12533323356430424537, -0.094108313318514318473, -0.062790519529313376076, 
    -0.031410759078128293839, 0, 0.031410759078128293839, 
    0.062790519529313376076, 0.094108313318514318473, 0.12533323356430424537, 
    0.15643446504023086901, 0.18738131458572463054, 0.21814324139654255202, 
    0.24868988716485478824, 0.27899110603922925185, 0.30901699437494742410, 
    0.33873792024529138122, 0.36812455268467795916, 0.39714789063478061375, 
    0.42577929156507264886, 0.45399049973954679156, 0.48175367410171527499, 
    0.50904141575037130028, 0.53582679497899661827, 0.56208337785213060010, 
    0.58778525229247312917, 0.61290705365297649336, 0.63742398974868971018, 
    0.66131186532365187657, 0.68454710592868867373, 0.70710678118654752440, 
    0.72896862742141152315, 0.75011106963045954151, 0.77051324277578923080, 
    0.79015501237569036516, 0.80901699437494742410, 0.82708057427456182492, 
    0.84432792550201507855, 0.86074202700394363716, 0.87630668004386358731, 
    0.89100652418836786236, 0.90482705246601952771, 0.91775462568398114115, 
    0.92977648588825140366, 0.94088076895422547232, 0.95105651629515357212, 
    0.96029368567694307175, 0.96858316112863111949, 0.97591676193874739896, 
    0.98228725072868868109, 0.98768834059513772619, 0.99211470131447783105, 
    0.99556196460308001290, 0.99802672842827156195, 0.99950656036573155700
};
std::array<double,99> ref_wgt = {
    0.00098679809963526754216, 0.0019726223486837734428, 0.0029564998576317107868, 
    0.0039374596581627191403, 0.0049145336613863863725, 0.0058867576132251047035, 
    0.0068531720460164294983, 0.0078128232253918241648, 0.0087647640914973361534, 
    0.0097080551936273328867, 0.010641765617348926961, 0.011564973903202130742, 
    0.012476768956069094230, 0.013376250944314988523, 0.014262532187813191410, 
    0.015134738033978401422, 0.015992007720943141441, 0.016833495227025800859, 
    0.017658370105651893894, 0.018465818304904567573, 0.019255042970895561992, 
    0.020025265234163792691, 0.020775724978325474692, 0.021505681590217223338, 
    0.022214414690791831235, 0.022901224846045415435, 0.023565434257274335576, 
    0.024206387429980682745, 0.024823451820766210106, 0.025416018461576299079, 
    0.025983502560677907643, 0.026525344079778408090, 0.027041008286715767601, 
    0.027529986283174633183, 0.027991795506907528878, 0.028425980207965533579, 
    0.028832111898468457256, 0.029209789775470646734, 0.029558641116505103529, 
    0.029878321647415559444, 0.030168515882113504085, 0.030428937433924865123, 
    0.030659329298219079721, 0.030859464106041636355, 0.031029144348499782331, 
    0.031168202571679955392, 0.031276501541904579449, 0.031353934381165135927, 
    0.031400424672597854635, 0.031415926535897932385, 0.031400424672597854635, 
    0.031353934381165135927, 0.031276501541904579449, 0.031168202571679955392, 
    0.031029144348499782331, 0.030859464106041636355, 0.030659329298219079721, 
    0.030428937433924865123, 0.030168515882113504085, 0.029878321647415559444, 
    0.029558641116505103529, 0.029209789775470646734, 0.028832111898468457256, 
    0.028425980207965533579, 0.027991795506907528878, 0.027529986283174633183, 
    0.027041008286715767601, 0.026525344079778408090, 0.025983502560677907643, 
    0.025416018461576299079, 0.024823451820766210106, 0.024206387429980682745, 
    0.023565434257274335576, 0.022901224846045415435, 0.022214414690791831235, 
    0.021505681590217223338, 0.020775724978325474692, 0.020025265234163792691, 
    0.019255042970895561992, 0.018465818304904567573, 0.017658370105651893894, 
    0.016833495227025800859, 0.015992007720943141441, 0.015134738033978401422, 
    0.014262532187813191410, 0.013376250944314988523, 0.012476768956069094230, 
    0.011564973903202130742, 0.010641765617348926961, 0.0097080551936273328867, 
    0.0087647640914973361534, 0.0078128232253918241648, 0.0068531720460164294983, 
    0.0058867576132251047035, 0.0049145336613863863725, 0.0039374596581627191403, 
    0.0029564998576317107868, 0.0019726223486837734428, 0.00098679809963526754216
};
IntegratorXX::GaussChebyshev2<double,double> quad(99);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 99; i++) {
    const std::string msg = "GaussChebyshev2 N = 99 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("108 point GaussChebyshev2", "[1d-quad]") {
std::array<double,108> ref_pts = {
    -0.99958467632385116120, -0.99833905028291658438, -0.99626415655316912489, 
    -0.99336171863959169650, -0.98963414744455242069, -0.98508453926519495794, 
    -0.97971667322150748338, -0.97353500811720667462, -0.96654467873604421006, 
    -0.95875149157661224099, -0.95016192002919070981, -0.94078309899864285370, 
    -0.93062281897782537100, -0.91968951957643615675, -0.90799228251067485267, 
    -0.89554082405953933167, -0.88234548699402427399, -0.86841723198592582512, 
    -0.85376762850338858892, -0.83840884520075754577, -0.82235363981071753993, 
    -0.80561534854711640353, -0.78820787502727423421, -0.77014567872298048079, 
    -0.75144376294977198578, -0.73211766240446865899, -0.71218343026131869534, 
    -0.69165762483747188959, -0.67055729583885733741, -0.64889997019789034788, 
    -0.62670363751477243884, -0.60398673511447756058, -0.58076813273183692279, 
    -0.55706711683744371849, -0.53290337461739739054, -0.50829697762019462405, 
    -0.48326836508435073101, -0.45783832696060029461, -0.43202798664277963716, 
    -0.40585878342173565838, -0.37935245467683565832, -0.35253101781987071997, 
    -0.32541675200635090061, -0.29803217962938369591, -0.27040004761150783780, 
    -0.24254330851002231475, -0.21448510145150542289, -0.18624873291136053928, 
    -0.15785765735435403671, -0.12933545775222622595, -0.10070582599455832034, 
    -0.071992543209167084223, -0.043219460008373977319, -0.014410476677557179208, 
    0.014410476677557179208, 0.043219460008373977319, 0.071992543209167084223, 
    0.10070582599455832034, 0.12933545775222622595, 0.15785765735435403671, 
    0.18624873291136053928, 0.21448510145150542289, 0.24254330851002231475, 
    0.27040004761150783780, 0.29803217962938369591, 0.32541675200635090061, 
    0.35253101781987071997, 0.37935245467683565832, 0.40585878342173565838, 
    0.43202798664277963716, 0.45783832696060029461, 0.48326836508435073101, 
    0.50829697762019462405, 0.53290337461739739054, 0.55706711683744371849, 
    0.58076813273183692279, 0.60398673511447756058, 0.62670363751477243884, 
    0.64889997019789034788, 0.67055729583885733741, 0.69165762483747188959, 
    0.71218343026131869534, 0.73211766240446865899, 0.75144376294977198578, 
    0.77014567872298048079, 0.78820787502727423421, 0.80561534854711640353, 
    0.82235363981071753993, 0.83840884520075754577, 0.85376762850338858892, 
    0.86841723198592582512, 0.88234548699402427399, 0.89554082405953933167, 
    0.90799228251067485267, 0.91968951957643615675, 0.93062281897782537100, 
    0.94078309899864285370, 0.95016192002919070981, 0.95875149157661224099, 
    0.96654467873604421006, 0.97353500811720667462, 0.97971667322150748338, 
    0.98508453926519495794, 0.98963414744455242069, 0.99336171863959169650, 
    0.99626415655316912489, 0.99833905028291658438, 0.99958467632385116120
};
std::array<double,108> ref_wgt = {
    0.00083058984960240478532, 0.0016604897719453920068, 0.0024890104128557954142, 
    0.0033154635638569188055, 0.0041391627338270850252, 0.0049594237192316685598, 
    0.0057755651724549500082, 0.0065869091677597090726, 0.0073927817644044432358, 
    0.0081925135664504602947, 0.0089854402787938424751, 0.0097709032589604156442, 
    0.010548250064205376595, 0.011316834993463131542, 0.012076019623697176633, 
    0.012825173340204502867, 0.013563673860434029470, 0.014290907750883957326, 
    0.015006270936648683065, 0.015709169203192019984, 0.016399018689929929235, 
    0.017075246375212768060, 0.017737290552304205883, 0.018384601295961437606, 
    0.019016640919229130508, 0.019632884420067670060, 0.020232819917444714076, 
    0.020815949076527816924, 0.021381787522624938654, 0.021929865243529000460, 
    0.022459726979932280037, 0.022970932603586350151, 0.023463057482893442866, 
    0.023935692835625561930, 0.024388446068478358131, 0.024820941103177718079, 
    0.025232818688868186859, 0.025623736700523739922, 0.025993370423133030112, 
    0.026341412821423052087, 0.026667574794897178906, 0.026971585417975724101, 
    0.027253192165039557112, 0.027512161120189840202, 0.027748277171549650494, 
    0.027961344189946090979, 0.028151185191824468692, 0.028317642486259215822, 
    0.028460577805939439509, 0.028579872422020297556, 0.028675427242744799028, 
    0.028747162895754109839, 0.028795019794017992460, 0.028818958185330614819, 
    0.028818958185330614819, 0.028795019794017992460, 0.028747162895754109839, 
    0.028675427242744799028, 0.028579872422020297556, 0.028460577805939439509, 
    0.028317642486259215822, 0.028151185191824468692, 0.027961344189946090979, 
    0.027748277171549650494, 0.027512161120189840202, 0.027253192165039557112, 
    0.026971585417975724101, 0.026667574794897178906, 0.026341412821423052087, 
    0.025993370423133030112, 0.025623736700523739922, 0.025232818688868186859, 
    0.024820941103177718079, 0.024388446068478358131, 0.023935692835625561930, 
    0.023463057482893442866, 0.022970932603586350151, 0.022459726979932280037, 
    0.021929865243529000460, 0.021381787522624938654, 0.020815949076527816924, 
    0.020232819917444714076, 0.019632884420067670060, 0.019016640919229130508, 
    0.018384601295961437606, 0.017737290552304205883, 0.017075246375212768060, 
    0.016399018689929929235, 0.015709169203192019984, 0.015006270936648683065, 
    0.014290907750883957326, 0.013563673860434029470, 0.012825173340204502867, 
    0.012076019623697176633, 0.011316834993463131542, 0.010548250064205376595, 
    0.0097709032589604156442, 0.0089854402787938424751, 0.0081925135664504602947, 
    0.0073927817644044432358, 0.0065869091677597090726, 0.0057755651724549500082, 
    0.0049594237192316685598, 0.0041391627338270850252, 0.0033154635638569188055, 
    0.0024890104128557954142, 0.0016604897719453920068, 0.00083058984960240478532
};
IntegratorXX::GaussChebyshev2<double,double> quad(108);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 108; i++) {
    const std::string msg = "GaussChebyshev2 N = 108 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("117 point GaussChebyshev2", "[1d-quad]") {
std::array<double,117> ref_pts = {
    -0.99964561112345257676, -0.99858269567676194811, -0.99681200703075014926, 
    -0.99433480021013713099, -0.99115283100400715864, -0.98726835472134456999, 
    -0.98268412459252094086, -0.97740338981786664856, -0.97142989326470996237, 
    -0.96476786881451594852, -0.95742203836200547842, -0.94939760846838129817, 
    -0.94070026667103327781, -0.93133617745233843959, -0.92131197787041298969, 
    -0.91063477285491317954, -0.89931213017121922813, -0.88735207505657157984, 
    -0.87476308453196128518, -0.86155408139380610973, -0.84773442788967093790, 
    -0.83331391908251497993, -0.81830277590816905628, -0.80271163793096366489, 
    -0.78655155580264248111, -0.76983398342990624464, -0.75257076985613850393, 
    -0.73477415086306727055, -0.71645674029831513859, -0.69763152113498470887, 
    -0.67831183626961608477, -0.65851137906503864279, -0.63824418364482009399, 
    -0.61752461494619191503, -0.59636735853850141391, -0.57478741021440688504, 
    -0.55280006536119338305, -0.53042090811974249013, -0.50766580033883995811, 
    -0.48455087033265016615, -0.46109250144932584609, -0.43730732045885539061, 
    -0.41321218576837817962, -0.38882417547332064723, -0.36416057525282217832, 
    -0.33923886611803028735, -0.31407671202194881542, -0.28869194733962100945, 
    -0.26310256422752125115, -0.23732669987111481781, -0.21138262362962432071, 
    -0.18528872408711432488, -0.15906349601907205320, -0.13272552728372197257, 
    -0.10629348564736540674, -0.079786105553083081940, -0.053222174842178654659, 
    -0.026620521437774766925, 0, 0.026620521437774766925, 
    0.053222174842178654659, 0.079786105553083081940, 0.10629348564736540674, 
    0.13272552728372197257, 0.15906349601907205320, 0.18528872408711432488, 
    0.21138262362962432071, 0.23732669987111481781, 0.26310256422752125115, 
    0.28869194733962100945, 0.31407671202194881542, 0.33923886611803028735, 
    0.36416057525282217832, 0.38882417547332064723, 0.41321218576837817962, 
    0.43730732045885539061, 0.46109250144932584609, 0.48455087033265016615, 
    0.50766580033883995811, 0.53042090811974249013, 0.55280006536119338305, 
    0.57478741021440688504, 0.59636735853850141391, 0.61752461494619191503, 
    0.63824418364482009399, 0.65851137906503864279, 0.67831183626961608477, 
    0.69763152113498470887, 0.71645674029831513859, 0.73477415086306727055, 
    0.75257076985613850393, 0.76983398342990624464, 0.78655155580264248111, 
    0.80271163793096366489, 0.81830277590816905628, 0.83331391908251497993, 
    0.84773442788967093790, 0.86155408139380610973, 0.87476308453196128518, 
    0.88735207505657157984, 0.89931213017121922813, 0.91063477285491317954, 
    0.92131197787041298969, 0.93133617745233843959, 0.94070026667103327781, 
    0.94939760846838129817, 0.95742203836200547842, 0.96476786881451594852, 
    0.97142989326470996237, 0.97740338981786664856, 0.98268412459252094086, 
    0.98726835472134456999, 0.99115283100400715864, 0.99433480021013713099, 
    0.99681200703075014926, 0.99858269567676194811, 0.99964561112345257676
};
std::array<double,117> ref_wgt = {
    0.00070873588630205769485, 0.0014169694363750845327, 0.0021241986700347933668, 
    0.0028299223189340278793, 0.0035336401818506153735, 0.0042348534792188651243, 
    0.0049330652066534282343, 0.0056277804872149491630, 0.0063185069221678308596, 
    0.0070047549399815042070, 0.0076860381433278374374, 0.0083618736538287414777, 
    0.0090317824543096217883, 0.0096952897283160950672, 0.010351925196653328920, 
    0.011001223450709472899, 0.011642724282326928684, 0.012275973009987653979, 
    0.012900520801081307246, 0.013515924990027816774, 0.014121749392028895902, 
    0.014717564612226124273, 0.015302948350046470787, 0.015877485698519544875, 
    0.016440769438354426721, 0.016992400326567641295, 0.017531987379457703120, 
    0.018059148149725665709, 0.018573508997545258786, 0.019074705355390484820, 
    0.019562381986432970951, 0.020036193236325930021, 0.020495803278196271837, 
    0.020940886350671219712, 0.021371126988770724299, 0.021786220247502023340, 
    0.022185871917997868447, 0.022569798736045224972, 0.022937728582856644456, 
    0.023289400677942007370, 0.023624565763943932954, 0.023942986283305848922, 
    0.024244436546647502640, 0.024528702892728572962, 0.024795583839887004065, 
    0.025044890228844725171, 0.025276445356779538637, 0.025490085102568149237, 
    0.025685658043111565164, 0.025863025560660421904, 0.026022061941064159168, 
    0.026162654462874414058, 0.026284703477239475962, 0.026388122478533175772, 
    0.026472838165668149227, 0.026538790494050016913, 0.026585932718135656957, 
    0.026614231424565406046, 0.026623666555845705411, 0.026614231424565406046, 
    0.026585932718135656957, 0.026538790494050016913, 0.026472838165668149227, 
    0.026388122478533175772, 0.026284703477239475962, 0.026162654462874414058, 
    0.026022061941064159168, 0.025863025560660421904, 0.025685658043111565164, 
    0.025490085102568149237, 0.025276445356779538637, 0.025044890228844725171, 
    0.024795583839887004065, 0.024528702892728572962, 0.024244436546647502640, 
    0.023942986283305848922, 0.023624565763943932954, 0.023289400677942007370, 
    0.022937728582856644456, 0.022569798736045224972, 0.022185871917997868447, 
    0.021786220247502023340, 0.021371126988770724299, 0.020940886350671219712, 
    0.020495803278196271837, 0.020036193236325930021, 0.019562381986432970951, 
    0.019074705355390484820, 0.018573508997545258786, 0.018059148149725665709, 
    0.017531987379457703120, 0.016992400326567641295, 0.016440769438354426721, 
    0.015877485698519544875, 0.015302948350046470787, 0.014717564612226124273, 
    0.014121749392028895902, 0.013515924990027816774, 0.012900520801081307246, 
    0.012275973009987653979, 0.011642724282326928684, 0.011001223450709472899, 
    0.010351925196653328920, 0.0096952897283160950672, 0.0090317824543096217883, 
    0.0083618736538287414777, 0.0076860381433278374374, 0.0070047549399815042070, 
    0.0063185069221678308596, 0.0056277804872149491630, 0.0049330652066534282343, 
    0.0042348534792188651243, 0.0035336401818506153735, 0.0028299223189340278793, 
    0.0021241986700347933668, 0.0014169694363750845327, 0.00070873588630205769485
};
IntegratorXX::GaussChebyshev2<double,double> quad(117);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 117; i++) {
    const std::string msg = "GaussChebyshev2 N = 117 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("126 point GaussChebyshev2", "[1d-quad]") {
std::array<double,126> ref_pts = {
    -0.99969405725308312514, -0.99877641621426128263, -0.99724763837477467410, 
    -0.99510865917160657590, -0.99236078741510301866, -0.98900570448813072238, 
    -0.98504546331726331068, -0.98048248711662532052, -0.97531956790516263092, 
    -0.96955986479824657148, -0.96320690207465705331, -0.95626456702012750740, 
    -0.94873710754877113390, -0.94062912960384387725, -0.93194559433943456242, 
    -0.92269181508480667527, -0.91287345409324926230, -0.90249651907742628064, 
    -0.89156735953334436787, -0.88009266285518834239, -0.86807945024340171018, 
    -0.85553507240851596414, -0.84246720507335744048, -0.82888384427638386659, 
    -0.81479330147902442065, -0.80020419848001705054, -0.78512546213985489530, 
    -0.76956631891856984398, -0.75353628923019548261, -0.73704518161736385181, 
    -0.72010308674960049458, -0.70272037124899015052, -0.68490767134699108218, 
    -0.66667588637627933664, -0.64803617210160518860, -0.62899993389374251704, 
    -0.60957881975070787690, -0.58978471317051948057, -0.56962972587985714448, 
    -0.54912619042307242851, -0.52828665261608364518, -0.50712386386977309092, 
    -0.48565077338758370128, -0.46388052024208930750, -0.44182642533538672617, 
    -0.41950198324822900138, -0.39692085398288719659, -0.37409685460479315919, 
    -0.35104395078807761546, -0.32777624827017675832, -0.30430798422073613031, 
    -0.28065351853009304427, -0.25682732502266799280, -0.23284398260064144519, 
    -0.20871816632333508705, -0.18446463842775590032, -0.16009823929579748207, 
    -0.13563387837362564095, -0.11108652504880456716, -0.086471199490745730370, 
    -0.061802963460084101945, -0.037096911092605310768, -0.012368159663362914083, 
    0.012368159663362914083, 0.037096911092605310768, 0.061802963460084101945, 
    0.086471199490745730370, 0.11108652504880456716, 0.13563387837362564095, 
    0.16009823929579748207, 0.18446463842775590032, 0.20871816632333508705, 
    0.23284398260064144519, 0.25682732502266799280, 0.28065351853009304427, 
    0.30430798422073613031, 0.32777624827017675832, 0.35104395078807761546, 
    0.37409685460479315919, 0.39692085398288719659, 0.41950198324822900138, 
    0.44182642533538672617, 0.46388052024208930750, 0.48565077338758370128, 
    0.50712386386977309092, 0.52828665261608364518, 0.54912619042307242851, 
    0.56962972587985714448, 0.58978471317051948057, 0.60957881975070787690, 
    0.62899993389374251704, 0.64803617210160518860, 0.66667588637627933664, 
    0.68490767134699108218, 0.70272037124899015052, 0.72010308674960049458, 
    0.73704518161736385181, 0.75353628923019548261, 0.76956631891856984398, 
    0.78512546213985489530, 0.80020419848001705054, 0.81479330147902442065, 
    0.82888384427638386659, 0.84246720507335744048, 0.85553507240851596414, 
    0.86807945024340171018, 0.88009266285518834239, 0.89156735953334436787, 
    0.90249651907742628064, 0.91287345409324926230, 0.92269181508480667527, 
    0.93194559433943456242, 0.94062912960384387725, 0.94873710754877113390, 
    0.95626456702012750740, 0.96320690207465705331, 0.96955986479824657148, 
    0.97531956790516263092, 0.98048248711662532052, 0.98504546331726331068, 
    0.98900570448813072238, 0.99236078741510301866, 0.99510865917160657590, 
    0.99724763837477467410, 0.99877641621426128263, 0.99969405725308312514
};
std::array<double,126> ref_wgt = {
    0.00061185429160301674159, 0.0012233341984406616718, 0.0018340655648281700233, 
    0.0024436746931018200150, 0.0030517885722791123627, 0.0036580351062987795118, 
    0.0042620433417009678390, 0.0048634436946082786245, 0.0054618681768687813872, 
    0.0060569506212226259532, 0.0066483269053544770756, 0.0072356351746946771687, 
    0.0078185160638328083592, 0.0083966129164081741067, 0.0089695720033426525971, 
    0.0095370427392823883925, 0.010098677897115884807, 0.010654133820437236494, 
    0.011203070633824499089, 0.011745152450804529600, 0.012280047579377046906, 
    0.012807428724972155144, 0.013326973190717143244, 0.013838363074890020241, 
    0.014341285465438967431, 0.014835432631448683720, 0.015320502211436468707, 
    0.015796197398362827835, 0.016262227121243394332, 0.016718306223251042216, 
    0.017164155636199212285, 0.017599502551299687260, 0.018024080586090331888, 
    0.018437629947430657331, 0.018839897590465475234, 0.019230637373459373898, 
    0.019609610208407275609, 0.019976584207328918695, 0.020331334824157748839, 
    0.020673644992137399905, 0.021003305256641693352, 0.021320113903336885605, 
    0.021623877081607742774, 0.021914408923171920086, 0.022191531655810067616, 
    0.022455075712142072513, 0.022704879833382879119, 0.022940791168014400297, 
    0.023162665365313144059, 0.023370366663676327297, 0.023563767973692431143, 
    0.023742750955905368300, 0.023907206093224679567, 0.024057032757937452820, 
    0.024192139273280960821, 0.024312442969538342450, 0.024417870234623003234, 
    0.024508356559120783303, 0.024583846575762332132, 0.024644294093301537489, 
    0.024689662124779278873, 0.024719922910155211262, 0.024735057933293731106, 
    0.024735057933293731106, 0.024719922910155211262, 0.024689662124779278873, 
    0.024644294093301537489, 0.024583846575762332132, 0.024508356559120783303, 
    0.024417870234623003234, 0.024312442969538342450, 0.024192139273280960821, 
    0.024057032757937452820, 0.023907206093224679567, 0.023742750955905368300, 
    0.023563767973692431143, 0.023370366663676327297, 0.023162665365313144059, 
    0.022940791168014400297, 0.022704879833382879119, 0.022455075712142072513, 
    0.022191531655810067616, 0.021914408923171920086, 0.021623877081607742774, 
    0.021320113903336885605, 0.021003305256641693352, 0.020673644992137399905, 
    0.020331334824157748839, 0.019976584207328918695, 0.019609610208407275609, 
    0.019230637373459373898, 0.018839897590465475234, 0.018437629947430657331, 
    0.018024080586090331888, 0.017599502551299687260, 0.017164155636199212285, 
    0.016718306223251042216, 0.016262227121243394332, 0.015796197398362827835, 
    0.015320502211436468707, 0.014835432631448683720, 0.014341285465438967431, 
    0.013838363074890020241, 0.013326973190717143244, 0.012807428724972155144, 
    0.012280047579377046906, 0.011745152450804529600, 0.011203070633824499089, 
    0.010654133820437236494, 0.010098677897115884807, 0.0095370427392823883925, 
    0.0089695720033426525971, 0.0083966129164081741067, 0.0078185160638328083592, 
    0.0072356351746946771687, 0.0066483269053544770756, 0.0060569506212226259532, 
    0.0054618681768687813872, 0.0048634436946082786245, 0.0042620433417009678390, 
    0.0036580351062987795118, 0.0030517885722791123627, 0.0024436746931018200150, 
    0.0018340655648281700233, 0.0012233341984406616718, 0.00061185429160301674159
};
IntegratorXX::GaussChebyshev2<double,double> quad(126);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 126; i++) {
    const std::string msg = "GaussChebyshev2 N = 126 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

