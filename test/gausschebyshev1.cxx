
/* THIS FILE IS AUTOGENERATED BY generate_quadrature_tests.py.
   DO NOT EDIT THIS FILE, EDIT THE AUTOGENERATOR INSTEAD.
*/

// clang-format off
#include "catch2/catch_all.hpp"
#include <integratorxx/quadratures/primitive/gausschebyshev1.hpp>
#include <numeric>
#include <vector>
#include "quad_matcher.hpp"
// clang-format on

const double x_tolerance = 10*std::numeric_limits<double>::epsilon();
const double w_tolerance = 10*std::numeric_limits<double>::epsilon();

TEST_CASE("2 point GaussChebyshev1", "[1d-quad]") {
std::array<double,2> ref_pts = {
    -0.70710678118654752440, 0.70710678118654752440
};
std::array<double,2> ref_wgt = {
    1.1107207345395915618, 1.1107207345395915618
};
IntegratorXX::GaussChebyshev1<double,double> quad(2);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 2; i++) {
    const std::string msg = "GaussChebyshev1 N = 2 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("3 point GaussChebyshev1", "[1d-quad]") {
std::array<double,3> ref_pts = {
    -0.86602540378443864676, 0, 0.86602540378443864676
};
std::array<double,3> ref_wgt = {
    0.52359877559829887308, 1.0471975511965977462, 0.52359877559829887308
};
IntegratorXX::GaussChebyshev1<double,double> quad(3);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 3; i++) {
    const std::string msg = "GaussChebyshev1 N = 3 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("4 point GaussChebyshev1", "[1d-quad]") {
std::array<double,4> ref_pts = {
    -0.92387953251128675613, -0.38268343236508977173, 0.38268343236508977173, 
    0.92387953251128675613
};
std::array<double,4> ref_wgt = {
    0.30055886494217313536, 0.72561328803485775351, 0.72561328803485775351, 
    0.30055886494217313536
};
IntegratorXX::GaussChebyshev1<double,double> quad(4);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 4; i++) {
    const std::string msg = "GaussChebyshev1 N = 4 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("5 point GaussChebyshev1", "[1d-quad]") {
std::array<double,5> ref_pts = {
    -0.95105651629515357212, -0.58778525229247312917, 0, 
    0.58778525229247312917, 0.95105651629515357212
};
std::array<double,5> ref_wgt = {
    0.19416110387254665773, 0.50832036923152598158, 0.62831853071795864769, 
    0.50832036923152598158, 0.19416110387254665773
};
IntegratorXX::GaussChebyshev1<double,double> quad(5);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 5; i++) {
    const std::string msg = "GaussChebyshev1 N = 5 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("6 point GaussChebyshev1", "[1d-quad]") {
std::array<double,6> ref_pts = {
    -0.96592582628906828675, -0.70710678118654752440, -0.25881904510252076235, 
    0.25881904510252076235, 0.70710678118654752440, 0.96592582628906828675
};
std::array<double,6> ref_wgt = {
    0.13551733511720076359, 0.37024024484653052058, 0.50575757996373128418, 
    0.50575757996373128418, 0.37024024484653052058, 0.13551733511720076359
};
IntegratorXX::GaussChebyshev1<double,double> quad(6);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 6; i++) {
    const std::string msg = "GaussChebyshev1 N = 6 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("9 point GaussChebyshev1", "[1d-quad]") {
std::array<double,9> ref_pts = {
    -0.98480775301220805937, -0.86602540378443864676, -0.64278760968653932632, 
    -0.34202014332566873304, 0, 0.34202014332566873304, 
    0.64278760968653932632, 0.86602540378443864676, 0.98480775301220805937
};
std::array<double,9> ref_wgt = {
    0.060614648807520398454, 0.17453292519943295769, 0.26739995498065173702, 
    0.32801460378817213547, 0.34906585039886591538, 0.32801460378817213547, 
    0.26739995498065173702, 0.17453292519943295769, 0.060614648807520398454
};
IntegratorXX::GaussChebyshev1<double,double> quad(9);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 9; i++) {
    const std::string msg = "GaussChebyshev1 N = 9 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("12 point GaussChebyshev1", "[1d-quad]") {
std::array<double,12> ref_pts = {
    -0.99144486137381041114, -0.92387953251128675613, -0.79335334029123516458, 
    -0.60876142900872063942, -0.38268343236508977173, -0.13052619222005159155, 
    0.13052619222005159155, 0.38268343236508977173, 0.60876142900872063942, 
    0.79335334029123516458, 0.92387953251128675613, 0.99144486137381041114
};
std::array<double,12> ref_wgt = {
    0.034171677214963608742, 0.10018628831405771179, 0.15937336943021843403, 
    0.20769941879665564243, 0.24187109601161925117, 0.25955965774427614582, 
    0.25955965774427614582, 0.24187109601161925117, 0.20769941879665564243, 
    0.15937336943021843403, 0.10018628831405771179, 0.034171677214963608742
};
IntegratorXX::GaussChebyshev1<double,double> quad(12);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 12; i++) {
    const std::string msg = "GaussChebyshev1 N = 12 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("15 point GaussChebyshev1", "[1d-quad]") {
std::array<double,15> ref_pts = {
    -0.99452189536827333692, -0.95105651629515357212, -0.86602540378443864676, 
    -0.74314482547739423501, -0.58778525229247312917, -0.40673664307580020775, 
    -0.20791169081775933710, 0, 0.20791169081775933710, 
    0.40673664307580020775, 0.58778525229247312917, 0.74314482547739423501, 
    0.86602540378443864676, 0.95105651629515357212, 0.99452189536827333692
};
std::array<double,15> ref_wgt = {
    0.021892390152846046611, 0.064720367957515552578, 0.10471975511965977462, 
    0.14014238648193818355, 0.16944012307717532719, 0.19133251323002137380, 
    0.20486275443945373613, 0.20943951023931954923, 0.20486275443945373613, 
    0.19133251323002137380, 0.16944012307717532719, 0.14014238648193818355, 
    0.10471975511965977462, 0.064720367957515552578, 0.021892390152846046611
};
IntegratorXX::GaussChebyshev1<double,double> quad(15);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 15; i++) {
    const std::string msg = "GaussChebyshev1 N = 15 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("18 point GaussChebyshev1", "[1d-quad]") {
std::array<double,18> ref_pts = {
    -0.99619469809174553230, -0.96592582628906828675, -0.90630778703664996324, 
    -0.81915204428899178968, -0.70710678118654752440, -0.57357643635104609611, 
    -0.42261826174069943619, -0.25881904510252076235, -0.087155742747658173558, 
    0.087155742747658173558, 0.25881904510252076235, 0.42261826174069943619, 
    0.57357643635104609611, 0.70710678118654752440, 0.81915204428899178968, 
    0.90630778703664996324, 0.96592582628906828675, 0.99619469809174553230
};
std::array<double,18> ref_wgt = {
    0.015211546729678045487, 0.045172445039066921198, 0.073760801464303874057, 
    0.10010797326181444713, 0.12341341494884350686, 0.14296900247285319735, 
    0.15818054920253124283, 0.16858585998791042806, 0.17386877472611832119, 
    0.17386877472611832119, 0.16858585998791042806, 0.15818054920253124283, 
    0.14296900247285319735, 0.12341341494884350686, 0.10010797326181444713, 
    0.073760801464303874057, 0.045172445039066921198, 0.015211546729678045487
};
IntegratorXX::GaussChebyshev1<double,double> quad(18);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 18; i++) {
    const std::string msg = "GaussChebyshev1 N = 18 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("21 point GaussChebyshev1", "[1d-quad]") {
std::array<double,21> ref_pts = {
    -0.99720379718118014823, -0.97492791218182360702, -0.93087374864420425564, 
    -0.86602540378443864676, -0.78183148246802980871, -0.68017273777091939019, 
    -0.56332005806362202775, -0.43388373911755812048, -0.29475517441090421683, 
    -0.14904226617617444693, 0, 0.14904226617617444693, 
    0.29475517441090421683, 0.43388373911755812048, 0.56332005806362202775, 
    0.68017273777091939019, 0.78183148246802980871, 0.86602540378443864676, 
    0.93087374864420425564, 0.97492791218182360702, 0.99720379718118014823
};
std::array<double,21> ref_wgt = {
    0.011179595857770864844, 0.033289053875576042749, 0.054654889438306486843, 
    0.074799825085471267582, 0.093273856243216812989, 0.10966430358289662369, 
    0.12360503159534117298, 0.13478462745311203782, 0.14295335745847266643, 
    0.14792874568152329983, 0.14959965017094253516, 0.14792874568152329983, 
    0.14295335745847266643, 0.13478462745311203782, 0.12360503159534117298, 
    0.10966430358289662369, 0.093273856243216812989, 0.074799825085471267582, 
    0.054654889438306486843, 0.033289053875576042749, 0.011179595857770864844
};
IntegratorXX::GaussChebyshev1<double,double> quad(21);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 21; i++) {
    const std::string msg = "GaussChebyshev1 N = 21 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("26 point GaussChebyshev1", "[1d-quad]") {
std::array<double,26> ref_pts = {
    -0.99817555422331747084, -0.98361990694714358842, -0.95472086650854562606, 
    -0.91189984599209007718, -0.85578127230144752264, -0.78718348060905018180, 
    -0.70710678118654752440, -0.61671887262854305846, -0.51733781417765677104, 
    -0.41041280545275679642, -0.29750305385520297665, -0.18025503781390574017, 
    -0.060378497422286053438, 0.060378497422286053438, 0.18025503781390574017, 
    0.29750305385520297665, 0.41041280545275679642, 0.51733781417765677104, 
    0.61671887262854305846, 0.70710678118654752440, 0.78718348060905018180, 
    0.85578127230144752264, 0.91189984599209007718, 0.95472086650854562606, 
    0.98361990694714358842, 0.99817555422331747084
};
std::array<double,26> ref_wgt = {
    0.0072955632283324666709, 0.021780303944950640656, 0.035947438785078241803, 
    0.049590379021136837995, 0.062510179863258772825, 0.074518441522308088141, 
    0.085440056503045504750, 0.095115763065716750413, 0.10340446762084438255, 
    0.11018530219147746330, 0.11535938694046648509, 0.11885127206114701258, 
    0.12061003800541901848, 0.12061003800541901848, 0.11885127206114701258, 
    0.11535938694046648509, 0.11018530219147746330, 0.10340446762084438255, 
    0.095115763065716750413, 0.085440056503045504750, 0.074518441522308088141, 
    0.062510179863258772825, 0.049590379021136837995, 0.035947438785078241803, 
    0.021780303944950640656, 0.0072955632283324666709
};
IntegratorXX::GaussChebyshev1<double,double> quad(26);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 26; i++) {
    const std::string msg = "GaussChebyshev1 N = 26 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("31 point GaussChebyshev1", "[1d-quad]") {
std::array<double,31> ref_pts = {
    -0.99871650717105280715, -0.98846832432811139916, -0.96807711886620430515, 
    -0.93775213214708045843, -0.89780453957074165714, -0.84864425749475095046, 
    -0.79077573693769858208, -0.72479278722911995887, -0.65137248272222220745, 
    -0.57126821509479227916, -0.48530196253108102521, -0.39435585511331858010, 
    -0.29936312297335795401, -0.20129852008866007914, -0.10116832198743217779, 
    0, 0.10116832198743217779, 0.20129852008866007914, 
    0.29936312297335795401, 0.39435585511331858010, 0.48530196253108102521, 
    0.57126821509479227916, 0.65137248272222220745, 0.72479278722911995887, 
    0.79077573693769858208, 0.84864425749475095046, 0.89780453957074165714, 
    0.93775213214708045843, 0.96807711886620430515, 0.98846832432811139916, 
    0.99871650717105280715
};
std::array<double,31> ref_wgt = {
    0.0051328727978751269741, 0.015345948172832509668, 0.025401553353150810007, 
    0.035196504222272033805, 0.044630291329592707925, 0.053606111253438089695, 
    0.062031859935164509136, 0.069821077791437758152, 0.076893836906556609158, 
    0.083177561201027660808, 0.088607771160352067501, 0.093128745482099021753, 
    0.096694092851871663955, 0.099267227980970272784, 0.10082174702096213005, 
    0.10134169850289655608, 0.10082174702096213005, 0.099267227980970272784, 
    0.096694092851871663955, 0.093128745482099021753, 0.088607771160352067501, 
    0.083177561201027660808, 0.076893836906556609158, 0.069821077791437758152, 
    0.062031859935164509136, 0.053606111253438089695, 0.044630291329592707925, 
    0.035196504222272033805, 0.025401553353150810007, 0.015345948172832509668, 
    0.0051328727978751269741
};
IntegratorXX::GaussChebyshev1<double,double> quad(31);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 31; i++) {
    const std::string msg = "GaussChebyshev1 N = 31 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("36 point GaussChebyshev1", "[1d-quad]") {
std::array<double,36> ref_pts = {
    -0.99904822158185776240, -0.99144486137381041114, -0.97629600711993336597, 
    -0.95371695074822692114, -0.92387953251128675613, -0.88701083317822170105, 
    -0.84339144581288570127, -0.79335334029123516458, -0.73727733681012404138, 
    -0.67559020761566024435, -0.60876142900872063942, -0.53729960834682383184, 
    -0.46174861323503393056, -0.38268343236508977173, -0.30070579950427312162, 
    -0.21643961393810287976, -0.13052619222005159155, -0.043619387365335999782, 
    0.043619387365335999782, 0.13052619222005159155, 0.21643961393810287976, 
    0.30070579950427312162, 0.38268343236508977173, 0.46174861323503393056, 
    0.53729960834682383184, 0.60876142900872063942, 0.67559020761566024435, 
    0.73727733681012404138, 0.79335334029123516458, 0.84339144581288570127, 
    0.88701083317822170105, 0.92387953251128675613, 0.95371695074822692114, 
    0.97629600711993336597, 0.99144486137381041114, 0.99904822158185776240
};
std::array<double,36> ref_wgt = {
    0.0038065096361396395424, 0.011390559071654536248, 0.018887919474826528462, 
    0.026241531405957492453, 0.033395429438019237262, 0.040295168087346038012, 
    0.046888236176640413945, 0.053124456476739478011, 0.058956367585626705773, 
    0.064339585138359259238, 0.069233139598885214143, 0.073599788062950997332, 
    0.077406297699090636875, 0.080623698670539750390, 0.083227504613185787700, 
    0.085197898991584198226, 0.086519885914758715273, 0.087183404263986451957, 
    0.087183404263986451957, 0.086519885914758715273, 0.085197898991584198226, 
    0.083227504613185787700, 0.080623698670539750390, 0.077406297699090636875, 
    0.073599788062950997332, 0.069233139598885214143, 0.064339585138359259238, 
    0.058956367585626705773, 0.053124456476739478011, 0.046888236176640413945, 
    0.040295168087346038012, 0.033395429438019237262, 0.026241531405957492453, 
    0.018887919474826528462, 0.011390559071654536248, 0.0038065096361396395424
};
IntegratorXX::GaussChebyshev1<double,double> quad(36);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 36; i++) {
    const std::string msg = "GaussChebyshev1 N = 36 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("41 point GaussChebyshev1", "[1d-quad]") {
std::array<double,41> ref_pts = {
    -0.99926618105081002039, -0.99340208975967506880, -0.98170831999685493768, 
    -0.96425349545314098385, -0.94114004797956157414, -0.91250361647655001597, 
    -0.87851225091094237703, -0.83936542613194995964, -0.79529287127342644197, 
    -0.74655322161196265054, -0.69343250079224172863, -0.63624244232655983326, 
    -0.57531866021862059959, -0.51101867944711036626, -0.44371983786695968600, 
    -0.37381707184076879139, -0.30172059859519231597, -0.22785350890313757560, 
    -0.15264928421887449854, -0.076549252836495646867, 0, 
    0.076549252836495646867, 0.15264928421887449854, 0.22785350890313757560, 
    0.30172059859519231597, 0.37381707184076879139, 0.44371983786695968600, 
    0.51101867944711036626, 0.57531866021862059959, 0.63624244232655983326, 
    0.69343250079224172863, 0.74655322161196265054, 0.79529287127342644197, 
    0.83936542613194995964, 0.87851225091094237703, 0.91250361647655001597, 
    0.94114004797956157414, 0.96425349545314098385, 0.98170831999685493768, 
    0.99340208975967506880, 0.99926618105081002039
};
std::array<double,41> ref_wgt = {
    0.0029349167505614957191, 0.0087875269931738514950, 0.014588568533183768370, 
    0.020303998552151707333, 0.025900276634085528476, 0.031344561593938292969, 
    0.036604904202740841637, 0.041650434678381438385, 0.046451543841762031090, 
    0.050980056875234771441, 0.055209398663635196230, 0.059114749747625142412, 
    0.062673191974149167579, 0.065863842989269682234, 0.068667978784123358564, 
    0.071069143574850415257, 0.073053246371677661493, 0.074608643670449521782, 
    0.075726207781340256774, 0.076399380393767326994, 0.076624211063165688743, 
    0.076399380393767326994, 0.075726207781340256774, 0.074608643670449521782, 
    0.073053246371677661493, 0.071069143574850415257, 0.068667978784123358564, 
    0.065863842989269682234, 0.062673191974149167579, 0.059114749747625142412, 
    0.055209398663635196230, 0.050980056875234771441, 0.046451543841762031090, 
    0.041650434678381438385, 0.036604904202740841637, 0.031344561593938292969, 
    0.025900276634085528476, 0.020303998552151707333, 0.014588568533183768370, 
    0.0087875269931738514950, 0.0029349167505614957191
};
IntegratorXX::GaussChebyshev1<double,double> quad(41);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 41; i++) {
    const std::string msg = "GaussChebyshev1 N = 41 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("46 point GaussChebyshev1", "[1d-quad]") {
std::array<double,46> ref_pts = {
    -0.99941702236617402895, -0.99475727885809482918, -0.98545951771719686801, 
    -0.97156708939794148293, -0.95314476681416082173, -0.93027844333783315439, 
    -0.90307473232453270466, -0.87166047003275122082, -0.83618212425471087022, 
    -0.79680511141590459530, -0.75371302532736111352, -0.70710678118654752440, 
    -0.65720367881797246116, -0.60423638952109452076, -0.54845187124931871364, 
    -0.49011021717801722536, -0.42948344303008190040, -0.36685421881305651570, 
    -0.30251455088107578749, -0.23676442046644673699, -0.16991038502866666211, 
    -0.10226414894203423714, -0.034141110185967895283, 0.034141110185967895283, 
    0.10226414894203423714, 0.16991038502866666211, 0.23676442046644673699, 
    0.30251455088107578749, 0.36685421881305651570, 0.42948344303008190040, 
    0.49011021717801722536, 0.54845187124931871364, 0.60423638952109452076, 
    0.65720367881797246116, 0.70710678118654752440, 0.75371302532736111352, 
    0.79680511141590459530, 0.83618212425471087022, 0.87166047003275122082, 
    0.90307473232453270466, 0.93027844333783315439, 0.95314476681416082173, 
    0.97156708939794148293, 0.98545951771719686801, 0.99475727885809482918, 
    0.99941702236617402895
};
std::array<double,46> ref_wgt = {
    0.0023316839336007912926, 0.0069841804139545040405, 0.011604113421188529919, 
    0.016169942694974651223, 0.020660380231565291464, 0.025054489538293931912, 
    0.029331783249168604066, 0.033472318646429500011, 0.037456790642705104507, 
    0.041266621790241114607, 0.044884048897537571617, 0.048292205849547459207, 
    0.051475202245290770439, 0.054418197486239186327, 0.057107469970037115946, 
    0.059530481066946029482, 0.061675933580724367991, 0.063533824421371421098, 
    0.065095491244150525927, 0.066353652837438931655, 0.067302443071097529840, 
    0.067937438247077479607, 0.068255677724742574071, 0.068255677724742574071, 
    0.067937438247077479607, 0.067302443071097529840, 0.066353652837438931655, 
    0.065095491244150525927, 0.063533824421371421098, 0.061675933580724367991, 
    0.059530481066946029482, 0.057107469970037115946, 0.054418197486239186327, 
    0.051475202245290770439, 0.048292205849547459207, 0.044884048897537571617, 
    0.041266621790241114607, 0.037456790642705104507, 0.033472318646429500011, 
    0.029331783249168604066, 0.025054489538293931912, 0.020660380231565291464, 
    0.016169942694974651223, 0.011604113421188529919, 0.0069841804139545040405, 
    0.0023316839336007912926
};
IntegratorXX::GaussChebyshev1<double,double> quad(46);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 46; i++) {
    const std::string msg = "GaussChebyshev1 N = 46 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("53 point GaussChebyshev1", "[1d-quad]") {
std::array<double,53> ref_pts = {
    -0.99956083650879434943, -0.99604984261521692498, -0.98904018732216397911, 
    -0.97855649229950400214, -0.96463558190835867291, -0.94732635385419138443, 
    -0.92668960743183343805, -0.90279782996574351572, -0.87573494219563680773, 
    -0.84559600350182605991, -0.81248687800568128041, -0.77652386271804241942, 
    -0.73783327904172728401, -0.69655102906299702757, -0.65282211819052162401, 
    -0.60680014581859337038, -0.55864676580365245686, -0.50853111864922048501, 
    -0.45662923739371306445, -0.40312342928797221419, -0.34820163543439878724, 
    -0.29205677063697582044, -0.23488604578098367943, -0.17689027512257296266, 
    -0.11827317092136580395, -0.059240627893714287219, 0, 
    0.059240627893714287219, 0.11827317092136580395, 0.17689027512257296266, 
    0.23488604578098367943, 0.29205677063697582044, 0.34820163543439878724, 
    0.40312342928797221419, 0.45662923739371306445, 0.50853111864922048501, 
    0.55864676580365245686, 0.60680014581859337038, 0.65282211819052162401, 
    0.69655102906299702757, 0.73783327904172728401, 0.77652386271804241942, 
    0.81248687800568128041, 0.84559600350182605991, 0.87573494219563680773, 
    0.90279782996574351572, 0.92668960743183343805, 0.94732635385419138443, 
    0.96463558190835867291, 0.97855649229950400214, 0.98904018732216397911, 
    0.99604984261521692498, 0.99956083650879434943
};
std::array<double,53> ref_wgt = {
    0.0017565253771466359396, 0.0052634062719898158437, 0.0087517992603390614297, 
    0.012209451234596369333, 0.015624217066096900628, 0.018984102265316365396, 
    0.022277305112952932106, 0.025492258113896700019, 0.028617668628478154960, 
    0.031642558538276866378, 0.034556302807162825990, 0.037348666802123363924, 
    0.040009842242784876672, 0.042530481653355360675, 0.044901731195974046861, 
    0.047115261770139798081, 0.049163298268980392949, 0.051038646889598983224, 
    0.052734720401569136741, 0.054245561284821955490, 0.055565862655652596460, 
    0.056690986907342834154, 0.057616981999923798164, 0.058340595341860500093, 
    0.058859285214898226626, 0.059171229701940609128, 0.059275333086599872424, 
    0.059171229701940609128, 0.058859285214898226626, 0.058340595341860500093, 
    0.057616981999923798164, 0.056690986907342834154, 0.055565862655652596460, 
    0.054245561284821955490, 0.052734720401569136741, 0.051038646889598983224, 
    0.049163298268980392949, 0.047115261770139798081, 0.044901731195974046861, 
    0.042530481653355360675, 0.040009842242784876672, 0.037348666802123363924, 
    0.034556302807162825990, 0.031642558538276866378, 0.028617668628478154960, 
    0.025492258113896700019, 0.022277305112952932106, 0.018984102265316365396, 
    0.015624217066096900628, 0.012209451234596369333, 0.0087517992603390614297, 
    0.0052634062719898158437, 0.0017565253771466359396
};
IntegratorXX::GaussChebyshev1<double,double> quad(53);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 53; i++) {
    const std::string msg = "GaussChebyshev1 N = 53 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("60 point GaussChebyshev1", "[1d-quad]") {
std::array<double,60> ref_pts = {
    -0.99965732497555728004, -0.99691733373312797620, -0.99144486137381041114, 
    -0.98325490756395458455, -0.97236992039767660183, -0.95881973486819304976, 
    -0.94264149109217839478, -0.92387953251128675613, -0.90258528434986060676, 
    -0.87881711266196537413, -0.85264016435409222152, -0.82412618862201566173, 
    -0.79335334029123516458, -0.76040596560003093817, -0.72537437101228763799, 
    -0.68835457569375398439, -0.64944804833018365573, -0.60876142900872063942, 
    -0.56640623692483283182, -0.52249856471594886499, -0.47715876025960841505, 
    -0.43051109680829514438, -0.38268343236508977173, -0.33380685923377092883, 
    -0.28401534470392261744, -0.23344536385590541177, -0.18223552549214745660, 
    -0.13052619222005159155, -0.078459095727844945033, -0.026176948307873152611, 
    0.026176948307873152611, 0.078459095727844945033, 0.13052619222005159155, 
    0.18223552549214745660, 0.23344536385590541177, 0.28401534470392261744, 
    0.33380685923377092883, 0.38268343236508977173, 0.43051109680829514438, 
    0.47715876025960841505, 0.52249856471594886499, 0.56640623692483283182, 
    0.60876142900872063942, 0.64944804833018365573, 0.68835457569375398439, 
    0.72537437101228763799, 0.76040596560003093817, 0.79335334029123516458, 
    0.82412618862201566173, 0.85264016435409222152, 0.87881711266196537413, 
    0.90258528434986060676, 0.92387953251128675613, 0.94264149109217839478, 
    0.95881973486819304976, 0.97236992039767660183, 0.98325490756395458455, 
    0.99144486137381041114, 0.99691733373312797620, 0.99965732497555728004
};
std::array<double,60> ref_wgt = {
    0.0013706218082902344239, 0.0041081086457649335167, 0.0068343354429927217485, 
    0.0095418298018200989934, 0.012223170668405144824, 0.014871008673810268086, 
    0.017478086278111616467, 0.020037257662811542357, 0.022541508317030405150, 
    0.024983974263793319664, 0.027357960873713935112, 0.029656961214508245108, 
    0.031874673886043686806, 0.034005020292038899310, 0.036042161301073612829, 
    0.037980513251241998594, 0.039814763254581837149, 0.041539883759331128486, 
    0.043151146330098010844, 0.044644134608173500290, 0.046014756416463734713, 
    0.047259254975862944360, 0.048374219202323850234, 0.049356593056401936142, 
    0.050203683919647143417, 0.050913169974883880915, 0.051483106570150515777, 
    0.051911931548855229164, 0.052198469531538650258, 0.052341935137507254777, 
    0.052341935137507254777, 0.052198469531538650258, 0.051911931548855229164, 
    0.051483106570150515777, 0.050913169974883880915, 0.050203683919647143417, 
    0.049356593056401936142, 0.048374219202323850234, 0.047259254975862944360, 
    0.046014756416463734713, 0.044644134608173500290, 0.043151146330098010844, 
    0.041539883759331128486, 0.039814763254581837149, 0.037980513251241998594, 
    0.036042161301073612829, 0.034005020292038899310, 0.031874673886043686806, 
    0.029656961214508245108, 0.027357960873713935112, 0.024983974263793319664, 
    0.022541508317030405150, 0.020037257662811542357, 0.017478086278111616467, 
    0.014871008673810268086, 0.012223170668405144824, 0.0095418298018200989934, 
    0.0068343354429927217485, 0.0041081086457649335167, 0.0013706218082902344239
};
IntegratorXX::GaussChebyshev1<double,double> quad(60);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 60; i++) {
    const std::string msg = "GaussChebyshev1 N = 60 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("67 point GaussChebyshev1", "[1d-quad]") {
std::array<double,67> ref_pts = {
    -0.99972518510981592489, -0.99752757218401010076, -0.99313717716255418008, 
    -0.98656365108654650751, -0.97782144399294515896, -0.96692977315025063671, 
    -0.95391258081477900892, -0.93879848160038637306, -0.92162069957733741130, 
    -0.90241699523858837602, -0.88122958249402846594, -0.85810503587514426482, 
    -0.83309418815409152968, -0.80625201860222982825, -0.77763753213375201754, 
    -0.74731362960007709544, -0.71534696952012749944, -0.68180782155043771162, 
    -0.64676991201719867224, -0.61031026184979209245, -0.57250901727207193052, 
    -0.53344927362357033992, -0.49321689269790731440, -0.45190031399993384825, 
    -0.40959036033650637399, -0.36638003816824614738, -0.32236433316115374202, 
    -0.27764000138750057624, -0.23230535663498322777, -0.18646005429168117523, 
    -0.14020487228188573234, -0.093641489534350766117, -0.046872262469940062623, 
    0, 0.046872262469940062623, 0.093641489534350766117, 
    0.14020487228188573234, 0.18646005429168117523, 0.23230535663498322777, 
    0.27764000138750057624, 0.32236433316115374202, 0.36638003816824614738, 
    0.40959036033650637399, 0.45190031399993384825, 0.49321689269790731440, 
    0.53344927362357033992, 0.57250901727207193052, 0.61031026184979209245, 
    0.64676991201719867224, 0.68180782155043771162, 0.71534696952012749944, 
    0.74731362960007709544, 0.77763753213375201754, 0.80625201860222982825, 
    0.83309418815409152968, 0.85810503587514426482, 0.88122958249402846594, 
    0.90241699523858837602, 0.92162069957733741130, 0.93879848160038637306, 
    0.95391258081477900892, 0.96692977315025063671, 0.97782144399294515896, 
    0.98656365108654650751, 0.99313717716255418008, 0.99752757218401010076, 
    0.99972518510981592489
};
std::array<double,67> ref_wgt = {
    0.0010992092091528510046, 0.0032952113270570244134, 0.0054839698553093008178, 
    0.0076606734276414326395, 0.0098205371771945547077, 0.011958813254694992894, 
    0.014070801265257386615, 0.016151858600872766877, 0.018197410645868538591, 
    0.020202960832906551273, 0.022164100527413991910, 0.024076518718718975688, 
    0.025936011496587615310, 0.027738491292331083736, 0.029479995864168711441, 
    0.031156697007095340021, 0.032764908968106753419, 0.034301096548284694923, 
    0.035761882873931328680, 0.037144056819670505639, 0.038444580067198246294, 
    0.039660593784165774732, 0.040789424908513469558, 0.041828592024441401795, 
    0.042775810817099801277, 0.043628999094008858037, 0.044386281362169688203, 
    0.045045992950804981123, 0.045606683670666649024, 0.046067121001866526817, 
    0.046426292803222578319, 0.046683409537164877937, 0.046837906005310541569, 
    0.046889442590892436395, 0.046837906005310541569, 0.046683409537164877937, 
    0.046426292803222578319, 0.046067121001866526817, 0.045606683670666649024, 
    0.045045992950804981123, 0.044386281362169688203, 0.043628999094008858037, 
    0.042775810817099801277, 0.041828592024441401795, 0.040789424908513469558, 
    0.039660593784165774732, 0.038444580067198246294, 0.037144056819670505639, 
    0.035761882873931328680, 0.034301096548284694923, 0.032764908968106753419, 
    0.031156697007095340021, 0.029479995864168711441, 0.027738491292331083736, 
    0.025936011496587615310, 0.024076518718718975688, 0.022164100527413991910, 
    0.020202960832906551273, 0.018197410645868538591, 0.016151858600872766877, 
    0.014070801265257386615, 0.011958813254694992894, 0.0098205371771945547077, 
    0.0076606734276414326395, 0.0054839698553093008178, 0.0032952113270570244134, 
    0.0010992092091528510046
};
IntegratorXX::GaussChebyshev1<double,double> quad(67);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 67; i++) {
    const std::string msg = "GaussChebyshev1 N = 67 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("74 point GaussChebyshev1", "[1d-quad]") {
std::array<double,74> ref_pts = {
    -0.99977471617476941283, -0.99797305456081250033, -0.99437297804890248193, 
    -0.98898097422024528437, -0.98180675983018912170, -0.97286326329797459614, 
    -0.96216660140884938635, -0.94973605027053188743, -0.93559401057636221790, 
    -0.91976596723773874368, -0.90228044345858519688, -0.88316894933460930366, 
    -0.86246592506998053150, -0.84020867891375434048, -0.81643731992788569697, 
    -0.79119468570798843380, -0.76452626518709253371, -0.73648011666151218338, 
    -0.70710678118654752440, -0.67645919149808690027, -0.64459257662423902829, 
    -0.61156436235889138243, -0.57743406777654816216, -0.54226319797493510366, 
    -0.50611513323865620934, -0.46905501482363697761, -0.43114962756817828615, 
    -0.39246727954216374392, -0.35307767895130077503, -0.31305180851822231181, 
    -0.27246179756682284294, -0.23138079204034148853, -0.18988282268742830240, 
    -0.14804267165373141916, -0.10593573771941602347, -0.063637900425466240729, 
    -0.021225383333623537202, 0.021225383333623537202, 0.063637900425466240729, 
    0.10593573771941602347, 0.14804267165373141916, 0.18988282268742830240, 
    0.23138079204034148853, 0.27246179756682284294, 0.31305180851822231181, 
    0.35307767895130077503, 0.39246727954216374392, 0.43114962756817828615, 
    0.46905501482363697761, 0.50611513323865620934, 0.54226319797493510366, 
    0.57743406777654816216, 0.61156436235889138243, 0.64459257662423902829, 
    0.67645919149808690027, 0.70710678118654752440, 0.73648011666151218338, 
    0.76452626518709253371, 0.79119468570798843380, 0.81643731992788569697, 
    0.84020867891375434048, 0.86246592506998053150, 0.88316894933460930366, 
    0.90228044345858519688, 0.91976596723773874368, 0.93559401057636221790, 
    0.94973605027053188743, 0.96216660140884938635, 0.97286326329797459614, 
    0.98180675983018912170, 0.98898097422024528437, 0.99437297804890248193, 
    0.99797305456081250033, 0.99977471617476941283
};
std::array<double,74> ref_wgt = {
    0.00090110146419647216069, 0.0027016805468449124238, 0.0044973910185396288731, 
    0.0062849968876374128816, 0.0080612767675367307459, 0.0098230296818341152248, 
    0.011567080832700000620, 0.013290287322078998262, 0.014989543815404622802, 
    0.016661788137622072560, 0.018304006791434652641, 0.019913240387829587781, 
    0.021486588979097050356, 0.023021217284731942803, 0.024514359800801006227, 
    0.025963325783567830298, 0.027365504098394935354, 0.028718367925184877388, 
    0.030019479311880853020, 0.031266493567821088598, 0.032457163489029891840, 
    0.033589343407831105986, 0.034660993059486289275, 0.035670181258889676411, 
    0.036615089380694269184, 0.037494014636597633807, 0.038305373143881514446, 
    0.039047702779675547161, 0.039719665815801498116, 0.040320051329449858659, 
    0.040847777385344595096, 0.041301892985463644806, 0.041681579782801630551, 
    0.041986153556086476767, 0.042215065442792388796, 0.042367902928227222331, 
    0.042444390588911840796, 0.042444390588911840796, 0.042367902928227222331, 
    0.042215065442792388796, 0.041986153556086476767, 0.041681579782801630551, 
    0.041301892985463644806, 0.040847777385344595096, 0.040320051329449858659, 
    0.039719665815801498116, 0.039047702779675547161, 0.038305373143881514446, 
    0.037494014636597633807, 0.036615089380694269184, 0.035670181258889676411, 
    0.034660993059486289275, 0.033589343407831105986, 0.032457163489029891840, 
    0.031266493567821088598, 0.030019479311880853020, 0.028718367925184877388, 
    0.027365504098394935354, 0.025963325783567830298, 0.024514359800801006227, 
    0.023021217284731942803, 0.021486588979097050356, 0.019913240387829587781, 
    0.018304006791434652641, 0.016661788137622072560, 0.014989543815404622802, 
    0.013290287322078998262, 0.011567080832700000620, 0.0098230296818341152248, 
    0.0080612767675367307459, 0.0062849968876374128816, 0.0044973910185396288731, 
    0.0027016805468449124238, 0.00090110146419647216069
};
IntegratorXX::GaussChebyshev1<double,double> quad(74);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 74; i++) {
    const std::string msg = "GaussChebyshev1 N = 74 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("81 point GaussChebyshev1", "[1d-quad]") {
std::array<double,81> ref_pts = {
    -0.99981197044850139894, -0.99830815827126820805, -0.99530279579316581936, 
    -0.99080040336484530851, -0.98480775301220805937, -0.97733385825063552320, 
    -0.96838996052780587728, -0.95798951231548887444, -0.94614815687575043038, 
    -0.93288370473200049901, -0.91821610688027401476, -0.90216742478103768027, 
    -0.88476179717665777235, -0.86602540378443864676, -0.84598642591984106086, 
    -0.82467500410910673401, -0.80212319275504378508, -0.77836491192416001194, 
    -0.75343589632766074436, -0.72737364157304869599, -0.70021734776716851474, 
    -0.67200786055552240996, -0.64278760968653932632, -0.61260054519320283957, 
    -0.58149207128802666790, -0.54950897807080603526, -0.51669937115186291572, 
    -0.48311259929663848322, -0.44879918020046217278, -0.41381072450513915146, 
    -0.37819985817164246894, -0.34202014332566873304, -0.30532599769511311325, 
    -0.26817261276063736254, -0.23061587074244017845, -0.19271226054808968602, 
    -0.15451879280784048707, -0.11609291412523022968, -0.077492420671930946262, 
    -0.038775371256816711490, 0, 0.038775371256816711490, 
    0.077492420671930946262, 0.11609291412523022968, 0.15451879280784048707, 
    0.19271226054808968602, 0.23061587074244017845, 0.26817261276063736254, 
    0.30532599769511311325, 0.34202014332566873304, 0.37819985817164246894, 
    0.41381072450513915146, 0.44879918020046217278, 0.48311259929663848322, 
    0.51669937115186291572, 0.54950897807080603526, 0.58149207128802666790, 
    0.61260054519320283957, 0.64278760968653932632, 0.67200786055552240996, 
    0.70021734776716851474, 0.72737364157304869599, 0.75343589632766074436, 
    0.77836491192416001194, 0.80212319275504378508, 0.82467500410910673401, 
    0.84598642591984106086, 0.86602540378443864676, 0.88476179717665777235, 
    0.90216742478103768027, 0.91821610688027401476, 0.93288370473200049901, 
    0.94614815687575043038, 0.95798951231548887444, 0.96838996052780587728, 
    0.97733385825063552320, 0.98480775301220805937, 0.99080040336484530851, 
    0.99530279579316581936, 0.99830815827126820805, 0.99981197044850139894
};
std::array<double,81> ref_wgt = {
    0.00075209463503315799073, 0.0022551526833257566001, 0.0037548187677622072596, 
    0.0052488372480959269089, 0.0067349609786133776059, 0.0082109546880546795177, 
    0.0096745983416739176407, 0.011123690480382284175, 0.012556051531951668081, 
    0.013969527089298327078, 0.015361991150915792044, 0.016731349318583084895, 
    0.018075541947538593054, 0.019392547244381439744, 0.020680384308040812168, 
    0.021937116109239340865, 0.023160852403969134257, 0.024349752576598323715, 
    0.025502028408331816798, 0.026615946766862230732, 0.027689832213165515617, 
    0.028722069521520399133, 0.029711106108961304113, 0.030655454370510611015, 
    0.031553693916677854152, 0.032404473709860440335, 0.033206514096432540317, 
    0.033958608731465698308, 0.034659626393186196935, 0.035308512684440061412, 
    0.035904291618606537925, 0.036446067087574681719, 0.036933024209575078651, 
    0.037364430554839433258, 0.037739637247244514907, 0.038058079940283484879, 
    0.038319279665896650793, 0.038522843554884926301, 0.038668465427822425759, 
    0.038755926255579405223, 0.038785094488762879487, 0.038755926255579405223, 
    0.038668465427822425759, 0.038522843554884926301, 0.038319279665896650793, 
    0.038058079940283484879, 0.037739637247244514907, 0.037364430554839433258, 
    0.036933024209575078651, 0.036446067087574681719, 0.035904291618606537925, 
    0.035308512684440061412, 0.034659626393186196935, 0.033958608731465698308, 
    0.033206514096432540317, 0.032404473709860440335, 0.031553693916677854152, 
    0.030655454370510611015, 0.029711106108961304113, 0.028722069521520399133, 
    0.027689832213165515617, 0.026615946766862230732, 0.025502028408331816798, 
    0.024349752576598323715, 0.023160852403969134257, 0.021937116109239340865, 
    0.020680384308040812168, 0.019392547244381439744, 0.018075541947538593054, 
    0.016731349318583084895, 0.015361991150915792044, 0.013969527089298327078, 
    0.012556051531951668081, 0.011123690480382284175, 0.0096745983416739176407, 
    0.0082109546880546795177, 0.0067349609786133776059, 0.0052488372480959269089, 
    0.0037548187677622072596, 0.0022551526833257566001, 0.00075209463503315799073
};
IntegratorXX::GaussChebyshev1<double,double> quad(81);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 81; i++) {
    const std::string msg = "GaussChebyshev1 N = 81 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("90 point GaussChebyshev1", "[1d-quad]") {
std::array<double,90> ref_pts = {
    -0.99984769515639123916, -0.99862953475457387378, -0.99619469809174553230, 
    -0.99254615164132203498, -0.98768834059513772619, -0.98162718344766395350, 
    -0.97437006478523522854, -0.96592582628906828675, -0.95630475596303548134, 
    -0.94551857559931681035, -0.93358042649720174899, -0.92050485345244032740, 
    -0.90630778703664996324, -0.89100652418836786236, -0.87461970713939580028, 
    -0.85716730070211228747, -0.83867056794542402964, -0.81915204428899178968, 
    -0.79863551004729284628, -0.77714596145697087998, -0.75470958022277199794, 
    -0.73135370161917048329, -0.70710678118654752440, -0.68199836006249850044, 
    -0.65605902899050728478, -0.62932039104983745271, -0.60181502315204827992, 
    -0.57357643635104609611, -0.54463903501502708222, -0.51503807491005421008, 
    -0.48480962024633702908, -0.45399049973954679156, -0.42261826174069943619, 
    -0.39073112848927375506, -0.35836794954530027348, -0.32556815445715666871, 
    -0.29237170472273672810, -0.25881904510252076235, -0.22495105434386499805, 
    -0.19080899537654481241, -0.15643446504023086901, -0.12186934340514748111, 
    -0.087155742747658173558, -0.052335956242943832722, -0.017452406437283512819, 
    0.017452406437283512819, 0.052335956242943832722, 0.087155742747658173558, 
    0.12186934340514748111, 0.15643446504023086901, 0.19080899537654481241, 
    0.22495105434386499805, 0.25881904510252076235, 0.29237170472273672810, 
    0.32556815445715666871, 0.35836794954530027348, 0.39073112848927375506, 
    0.42261826174069943619, 0.45399049973954679156, 0.48480962024633702908, 
    0.51503807491005421008, 0.54463903501502708222, 0.57357643635104609611, 
    0.60181502315204827992, 0.62932039104983745271, 0.65605902899050728478, 
    0.68199836006249850044, 0.70710678118654752440, 0.73135370161917048329, 
    0.75470958022277199794, 0.77714596145697087998, 0.79863551004729284628, 
    0.81915204428899178968, 0.83867056794542402964, 0.85716730070211228747, 
    0.87461970713939580028, 0.89100652418836786236, 0.90630778703664996324, 
    0.92050485345244032740, 0.93358042649720174899, 0.94551857559931681035, 
    0.95630475596303548134, 0.96592582628906828675, 0.97437006478523522854, 
    0.98162718344766395350, 0.98768834059513772619, 0.99254615164132203498, 
    0.99619469809174553230, 0.99862953475457387378, 0.99984769515639123916
};
std::array<double,90> ref_wgt = {
    0.00060920390945370111580, 0.0018268695072381024566, 0.0030423093459356090974, 
    0.0042540425993269227085, 0.0054605929570959848583, 0.0066604904234866889609, 
    0.0078522731082662736037, 0.0090344890078133842397, 0.010205697774160821796, 
    0.011364472469837672110, 0.012509401306372811371, 0.013639089364341688843, 
    0.014752160292860774811, 0.015847257986459101567, 0.016923048237283887741, 
    0.017978220360627287959, 0.019011488791793813849, 0.020021594652362889426, 
    0.021007307283938291217, 0.021967425747515835664, 0.022900780286642565244, 
    0.023806233752584799236, 0.024682682989768701372, 0.025529060179805418471, 
    0.026344334142463302438, 0.027127511592002181395, 0.027877638347339030136, 
    0.028593800494570639469, 0.029275125500436929631, 0.029920783275368324245, 
    0.030529987184822025361, 0.031101995007675032087, 0.031636109840506248567, 
    0.032131680946665952845, 0.032588104549098166253, 0.033004824565949991399, 
    0.033381333288071692075, 0.033717171997582085612, 0.034011931526745621031, 
    0.034265252756480237353, 0.034476827053888647035, 0.034646396648279980060, 
    0.034773754945223664237, 0.034858746778252915415, 0.034901268597911175700, 
    0.034901268597911175700, 0.034858746778252915415, 0.034773754945223664237, 
    0.034646396648279980060, 0.034476827053888647035, 0.034265252756480237353, 
    0.034011931526745621031, 0.033717171997582085612, 0.033381333288071692075, 
    0.033004824565949991399, 0.032588104549098166253, 0.032131680946665952845, 
    0.031636109840506248567, 0.031101995007675032087, 0.030529987184822025361, 
    0.029920783275368324245, 0.029275125500436929631, 0.028593800494570639469, 
    0.027877638347339030136, 0.027127511592002181395, 0.026344334142463302438, 
    0.025529060179805418471, 0.024682682989768701372, 0.023806233752584799236, 
    0.022900780286642565244, 0.021967425747515835664, 0.021007307283938291217, 
    0.020021594652362889426, 0.019011488791793813849, 0.017978220360627287959, 
    0.016923048237283887741, 0.015847257986459101567, 0.014752160292860774811, 
    0.013639089364341688843, 0.012509401306372811371, 0.011364472469837672110, 
    0.010205697774160821796, 0.0090344890078133842397, 0.0078522731082662736037, 
    0.0066604904234866889609, 0.0054605929570959848583, 0.0042540425993269227085, 
    0.0030423093459356090974, 0.0018268695072381024566, 0.00060920390945370111580
};
IntegratorXX::GaussChebyshev1<double,double> quad(90);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 90; i++) {
    const std::string msg = "GaussChebyshev1 N = 90 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("99 point GaussChebyshev1", "[1d-quad]") {
std::array<double,99> ref_pts = {
    -0.99987412767387504140, -0.99886733918300797666, -0.99685477595194234432, 
    -0.99383846446125414744, -0.98982144188093273238, -0.98480775301220805937, 
    -0.97880244621477872711, -0.97181156832354168738, -0.96384215855994207205, 
    -0.95490224144407388710, -0.94500081871466848739, -0.93414786026510671890, 
    -0.92235429410458139588, -0.90963199535451837141, -0.89599377429133587245, 
    -0.88145336344758202733, -0.86602540378443864676, -0.84972542994951437484, 
    -0.83256985463477136287, -0.81457595205033570778, -0.79576184053083212724, 
    -0.77614646429175681803, -0.75574957435425828377, -0.73459170865753326075, 
    -0.71269417137886287332, -0.69007901148211198967, -0.66676900051629162045, 
    -0.64278760968653932632, -0.61815898622060521322, -0.59290792905464046092, 
    -0.56705986386277073452, -0.54064081745559758211, -0.51367739157340635716, 
    -0.48619673610046868424, -0.45822652172741039456, -0.42979491208917160980, 
    -0.40093053540661368653, -0.37166245566032751915, -0.34202014332566873304, 
    -0.31203344569848710665, -0.28173255684142969771, -0.25114798718107919873, 
    -0.22031053278654062636, -0.18925124436041020362, -0.15800139597334990087, 
    -0.12659245357374926865, -0.095056043304182663632, -0.063423919656564509574, 
    -0.031727933498067652488, 0, 0.031727933498067652488, 
    0.063423919656564509574, 0.095056043304182663632, 0.12659245357374926865, 
    0.15800139597334990087, 0.18925124436041020362, 0.22031053278654062636, 
    0.25114798718107919873, 0.28173255684142969771, 0.31203344569848710665, 
    0.34202014332566873304, 0.37166245566032751915, 0.40093053540661368653, 
    0.42979491208917160980, 0.45822652172741039456, 0.48619673610046868424, 
    0.51367739157340635716, 0.54064081745559758211, 0.56705986386277073452, 
    0.59290792905464046092, 0.61815898622060521322, 0.64278760968653932632, 
    0.66676900051629162045, 0.69007901148211198967, 0.71269417137886287332, 
    0.73459170865753326075, 0.75574957435425828377, 0.77614646429175681803, 
    0.79576184053083212724, 0.81457595205033570778, 0.83256985463477136287, 
    0.84972542994951437484, 0.86602540378443864676, 0.88145336344758202733, 
    0.89599377429133587245, 0.90963199535451837141, 0.92235429410458139588, 
    0.93414786026510671890, 0.94500081871466848739, 0.95490224144407388710, 
    0.96384215855994207205, 0.97181156832354168738, 0.97880244621477872711, 
    0.98480775301220805937, 0.98982144188093273238, 0.99383846446125414744, 
    0.99685477595194234432, 0.99886733918300797666, 0.99987412767387504140
};
std::array<double,99> ref_wgt = {
    0.00050347874167226192457, 0.0015099292646019872410, 0.0025148594167534814787, 
    0.0035172573186478094520, 0.0045161136405673952802, 0.0055104226188654907685, 
    0.0064991830686849127493, 0.0074813993920663274605, 0.0084560825804310023676, 
    0.0094222512104286102820, 0.010378932432147351444, 0.011325162948691349748, 
    0.012259989986138971714, 0.013182472252905402378, 0.014091680887543481334, 
    0.014986700394028443811, 0.015866629563584814336, 0.016730582382127251438, 
    0.017577688922401627395, 0.018407096219928032559, 0.019217969131863703925, 
    0.020009491177921075764, 0.020780865362494219134, 0.021531314977165858624, 
    0.022260084382786909799, 0.022966439770341049535, 0.023649669899828193137, 
    0.024309086816422885184, 0.024944026543186493334, 0.025553849749635702611, 
    0.026137942395494118377, 0.026695716348978774696, 0.027226609978998985986, 
    0.027730088720671247910, 0.028205645613580761937, 0.028652801812247599856, 
    0.029071107068283512063, 0.029460140183753888614, 0.029819509435288375952, 
    0.030148852968513105886, 0.030447839162407376996, 0.030716166963217912166, 
    0.030953566187594468906, 0.031159797794641570577, 0.031334654126612425512, 
    0.031477959118002675639, 0.031589568472833434937, 0.031669369809945108729, 
    0.031717282776155695249, 0.031733259127169628671, 0.031717282776155695249, 
    0.031669369809945108729, 0.031589568472833434937, 0.031477959118002675639, 
    0.031334654126612425512, 0.031159797794641570577, 0.030953566187594468906, 
    0.030716166963217912166, 0.030447839162407376996, 0.030148852968513105886, 
    0.029819509435288375952, 0.029460140183753888614, 0.029071107068283512063, 
    0.028652801812247599856, 0.028205645613580761937, 0.027730088720671247910, 
    0.027226609978998985986, 0.026695716348978774696, 0.026137942395494118377, 
    0.025553849749635702611, 0.024944026543186493334, 0.024309086816422885184, 
    0.023649669899828193137, 0.022966439770341049535, 0.022260084382786909799, 
    0.021531314977165858624, 0.020780865362494219134, 0.020009491177921075764, 
    0.019217969131863703925, 0.018407096219928032559, 0.017577688922401627395, 
    0.016730582382127251438, 0.015866629563584814336, 0.014986700394028443811, 
    0.014091680887543481334, 0.013182472252905402378, 0.012259989986138971714, 
    0.011325162948691349748, 0.010378932432147351444, 0.0094222512104286102820, 
    0.0084560825804310023676, 0.0074813993920663274605, 0.0064991830686849127493, 
    0.0055104226188654907685, 0.0045161136405673952802, 0.0035172573186478094520, 
    0.0025148594167534814787, 0.0015099292646019872410, 0.00050347874167226192457
};
IntegratorXX::GaussChebyshev1<double,double> quad(99);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 99; i++) {
    const std::string msg = "GaussChebyshev1 N = 99 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("108 point GaussChebyshev1", "[1d-quad]") {
std::array<double,108> ref_pts = {
    -0.99989423192710752255, -0.99904822158185776240, -0.99735691670057227286, 
    -0.99482174829603305710, -0.99144486137381041114, -0.98722911311737406346, 
    -0.98217807047063071096, -0.97629600711993336597, -0.96958789987811603550, 
    -0.96205942447361320062, -0.95371695074822692114, -0.94456753726760473409, 
    -0.93461892534898841976, -0.92387953251128675613, -0.91235844535301415401, 
    -0.90006541186412114782, -0.88701083317822170105, -0.87320575477219576542, 
    -0.85866185712061310865, -0.84339144581288570127, -0.82740744114151053820, 
    -0.81072336717021228116, -0.79335334029123516458, -0.77531205728146583854, 
    -0.75661478286749286113, -0.73727733681012404138, -0.71731608051928942062, 
    -0.69674790321065502045, -0.67559020761566024435, -0.65386089525706966783, 
    -0.63157835130249757034, -0.60876142900872063942, -0.58542943376994051135, 
    -0.56160210678349291107, -0.53729960834682383184, -0.51254250079986518058, 
    -0.48735173112724234196, -0.46174861323503393056, -0.43575480991707936179, 
    -0.40939231452609254575, -0.38268343236508977173, -0.35565076181487649312, 
    -0.32831717521356104314, -0.30070579950427312162, -0.27283999666746101505, 
    -0.24474334395432378000, -0.21643961393810287976, -0.18795275440011187296, 
    -0.15930686806752258121, -0.13052619222005159155, -0.10163507818280187285, 
    -0.072657970722610609620, -0.043619387365335999782, -0.014543897651582656770, 
    0.014543897651582656770, 0.043619387365335999782, 0.072657970722610609620, 
    0.10163507818280187285, 0.13052619222005159155, 0.15930686806752258121, 
    0.18795275440011187296, 0.21643961393810287976, 0.24474334395432378000, 
    0.27283999666746101505, 0.30070579950427312162, 0.32831717521356104314, 
    0.35565076181487649312, 0.38268343236508977173, 0.40939231452609254575, 
    0.43575480991707936179, 0.46174861323503393056, 0.48735173112724234196, 
    0.51254250079986518058, 0.53729960834682383184, 0.56160210678349291107, 
    0.58542943376994051135, 0.60876142900872063942, 0.63157835130249757034, 
    0.65386089525706966783, 0.67559020761566024435, 0.69674790321065502045, 
    0.71731608051928942062, 0.73727733681012404138, 0.75661478286749286113, 
    0.77531205728146583854, 0.79335334029123516458, 0.81072336717021228116, 
    0.82740744114151053820, 0.84339144581288570127, 0.85866185712061310865, 
    0.87320575477219576542, 0.88701083317822170105, 0.90006541186412114782, 
    0.91235844535301415401, 0.92387953251128675613, 0.93461892534898841976, 
    0.94456753726760473409, 0.95371695074822692114, 0.96205942447361320062, 
    0.96958789987811603550, 0.97629600711993336597, 0.98217807047063071096, 
    0.98722911311737406346, 0.99144486137381041114, 0.99482174829603305710, 
    0.99735691670057227286, 0.99904822158185776240, 0.99989423192710752255
};
std::array<double,108> ref_wgt = {
    0.00042306483348864741522, 0.0012688365453798798475, 0.0021135346948786645557, 
    0.0029564445830195799686, 0.0037968530238848454158, 0.0046340489480308089138, 
    0.0054673240041236865386, 0.0062959731582755094875, 0.0071192952905731807800, 
    0.0079365937882959184653, 0.0087471771353191641510, 0.0095503594972062623065, 
    0.010345461301492864365, 0.011131809812673079087, 0.011908739701400873496, 
    0.012675593607425123174, 0.013431722695782012671, 0.014176487205774191717, 
    0.014909256992272196075, 0.015629412058880137982, 0.016336343082514554781, 
    0.017029451928952569670, 0.017708152158913159337, 0.018371869524243333229, 
    0.019020042453789401386, 0.019652122528542235257, 0.020267574945654501165, 
    0.020865878970937261507, 0.021446528379453086413, 0.022009031883832890075, 
    0.022552913549954092968, 0.023077713199628404714, 0.023582986799958513548, 
    0.024068306839034247726, 0.024533262687650332444, 0.024977460946739692912, 
    0.025400525780228340327, 0.025802099233030212292, 0.026181841533912912281, 
    0.026539431382978093516, 0.026874566223513250130, 0.027186962497984901881, 
    0.027476355887956576614, 0.027742501537728595900, 0.027985174261510442287, 
    0.028204168733950419630, 0.028399299663861399409, 0.028570401950995663692, 
    0.028717330825736197594, 0.028839961971586238424, 0.028938191630353443165, 
    0.029011936689939677955, 0.029061134754662150652, 0.029085744198046387792, 
    0.029085744198046387792, 0.029061134754662150652, 0.029011936689939677955, 
    0.028938191630353443165, 0.028839961971586238424, 0.028717330825736197594, 
    0.028570401950995663692, 0.028399299663861399409, 0.028204168733950419630, 
    0.027985174261510442287, 0.027742501537728595900, 0.027476355887956576614, 
    0.027186962497984901881, 0.026874566223513250130, 0.026539431382978093516, 
    0.026181841533912912281, 0.025802099233030212292, 0.025400525780228340327, 
    0.024977460946739692912, 0.024533262687650332444, 0.024068306839034247726, 
    0.023582986799958513548, 0.023077713199628404714, 0.022552913549954092968, 
    0.022009031883832890075, 0.021446528379453086413, 0.020865878970937261507, 
    0.020267574945654501165, 0.019652122528542235257, 0.019020042453789401386, 
    0.018371869524243333229, 0.017708152158913159337, 0.017029451928952569670, 
    0.016336343082514554781, 0.015629412058880137982, 0.014909256992272196075, 
    0.014176487205774191717, 0.013431722695782012671, 0.012675593607425123174, 
    0.011908739701400873496, 0.011131809812673079087, 0.010345461301492864365, 
    0.0095503594972062623065, 0.0087471771353191641510, 0.0079365937882959184653, 
    0.0071192952905731807800, 0.0062959731582755094875, 0.0054673240041236865386, 
    0.0046340489480308089138, 0.0037968530238848454158, 0.0029564445830195799686, 
    0.0021135346948786645557, 0.0012688365453798798475, 0.00042306483348864741522
};
IntegratorXX::GaussChebyshev1<double,double> quad(108);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 108; i++) {
    const std::string msg = "GaussChebyshev1 N = 108 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("117 point GaussChebyshev1", "[1d-quad]") {
std::array<double,117> ref_pts = {
    -0.99990987785672100175, -0.99918899817156963770, -0.99774775851562514539, 
    -0.99558719794291870602, -0.99270887409805399280, -0.98911486209323161454, 
    -0.98480775301220805937, -0.97979065204226770147, -0.97406717623555461564, 
    -0.96764145190137815543, -0.96051811163137229844, -0.95270229095965345396, 
    -0.94419962466038457466, -0.93501624268541482344, -0.92515876574492353260, 
    -0.91463430053425456636, -0.90345043461038227502, -0.89161523092170282531, 
    -0.87913722199509462462, -0.86602540378443864676, -0.85228922918503353585, 
    -0.83793860121858123591, -0.82298386589365639458, -0.80743580474680674718, 
    -0.79130562706966193513, -0.77460496182765458307, -0.75734584927617978941, 
    -0.73954073228023731556, -0.72120244734381453129, -0.70234421535547743468, 
    -0.68297963205684166342, -0.66312265824079520238, -0.64278760968653932632, 
    -0.62198914683870405642, -0.60074226423797891692, -0.57906227971087892246, 
    -0.55696482332643937641, -0.53446582612780109204, -0.51158150864680994024, 
    -0.48832836920991106151, -0.46472317204376854566, -0.44078293518918576898, 
    -0.41652491823203978355, -0.39196660986007507588, -0.36712571525452755812, 
    -0.34202014332566873304, -0.31666799380147249909, -0.29108754417871295221, 
    -0.26529723654590072076, -0.23931566428755776715, -0.21316155867941613840, 
    -0.18685377538420478525, -0.16041128085776024037, -0.13385313867526159747, 
    -0.10719849578744781918, -0.080466568716725880436, -0.053676629703121589402, 
    -0.026847992810061088774, 0, 0.026847992810061088774, 
    0.053676629703121589402, 0.080466568716725880436, 0.10719849578744781918, 
    0.13385313867526159747, 0.16041128085776024037, 0.18685377538420478525, 
    0.21316155867941613840, 0.23931566428755776715, 0.26529723654590072076, 
    0.29108754417871295221, 0.31666799380147249909, 0.34202014332566873304, 
    0.36712571525452755812, 0.39196660986007507588, 0.41652491823203978355, 
    0.44078293518918576898, 0.46472317204376854566, 0.48832836920991106151, 
    0.51158150864680994024, 0.53446582612780109204, 0.55696482332643937641, 
    0.57906227971087892246, 0.60074226423797891692, 0.62198914683870405642, 
    0.64278760968653932632, 0.66312265824079520238, 0.68297963205684166342, 
    0.70234421535547743468, 0.72120244734381453129, 0.73954073228023731556, 
    0.75734584927617978941, 0.77460496182765458307, 0.79130562706966193513, 
    0.80743580474680674718, 0.82298386589365639458, 0.83793860121858123591, 
    0.85228922918503353585, 0.86602540378443864676, 0.87913722199509462462, 
    0.89161523092170282531, 0.90345043461038227502, 0.91463430053425456636, 
    0.92515876574492353260, 0.93501624268541482344, 0.94419962466038457466, 
    0.95270229095965345396, 0.96051811163137229844, 0.96764145190137815543, 
    0.97406717623555461564, 0.97979065204226770147, 0.98480775301220805937, 
    0.98911486209323161454, 0.99270887409805399280, 0.99558719794291870602, 
    0.99774775851562514539, 0.99918899817156963770, 0.99990987785672100175
};
std::array<double,117> ref_wgt = {
    0.00036048315835125474093, 0.0010811895866463693142, 0.0018011165370844582048, 
    0.0025197449821762878724, 0.0032365568305831178424, 0.0039510353006318838480, 
    0.0046626652928861844964, 0.0053709337615044683986, 0.0060753300841176930631, 
    0.0067753464299597942292, 0.0074704781259855639451, 0.0081602240207119866637, 
    0.0088440868455207238852, 0.0095215735731612682542, 0.010192195773196306174, 
    0.010855469964133032503, 0.011510917961986550149, 0.012158067225024059626, 
    0.012796451194441297113, 0.013425609630725612130, 0.014045088945463185697, 
    0.014654442528351174306, 0.015253231069179022068, 0.015841022874546810321, 
    0.016417394179092308288, 0.016981929451002347328, 0.017534221691588261957, 
    0.018073872728709420351, 0.018600493503833302193, 0.019113704352525169425, 
    0.019613135278165112396, 0.020098426218695136552, 0.020569227306203979771, 
    0.021025199119162514078, 0.021466012927127883958, 0.021891350927739963126, 
    0.022300906475839268439, 0.022694384304541149590, 0.023071500738106872353, 
    0.023431983896458127095, 0.023775573891187518904, 0.024102023012923726644, 
    0.024411095909916250998, 0.024702569757711001800, 0.024976234419794397926, 
    0.025231892599090164267, 0.025469359980199604951, 0.025688465362282805460, 
    0.025889050782484963654, 0.026070971629818866138, 0.026234096749421407015, 
    0.026378308537108985842, 0.026503503024163615582, 0.026609589952288614462, 
    0.026696492838679842824, 0.026764149031165572217, 0.026812509753375233932, 
    0.026841540139904482810, 0.026851219261451224260, 0.026841540139904482810, 
    0.026812509753375233932, 0.026764149031165572217, 0.026696492838679842824, 
    0.026609589952288614462, 0.026503503024163615582, 0.026378308537108985842, 
    0.026234096749421407015, 0.026070971629818866138, 0.025889050782484963654, 
    0.025688465362282805460, 0.025469359980199604951, 0.025231892599090164267, 
    0.024976234419794397926, 0.024702569757711001800, 0.024411095909916250998, 
    0.024102023012923726644, 0.023775573891187518904, 0.023431983896458127095, 
    0.023071500738106872353, 0.022694384304541149590, 0.022300906475839268439, 
    0.021891350927739963126, 0.021466012927127883958, 0.021025199119162514078, 
    0.020569227306203979771, 0.020098426218695136552, 0.019613135278165112396, 
    0.019113704352525169425, 0.018600493503833302193, 0.018073872728709420351, 
    0.017534221691588261957, 0.016981929451002347328, 0.016417394179092308288, 
    0.015841022874546810321, 0.015253231069179022068, 0.014654442528351174306, 
    0.014045088945463185697, 0.013425609630725612130, 0.012796451194441297113, 
    0.012158067225024059626, 0.011510917961986550149, 0.010855469964133032503, 
    0.010192195773196306174, 0.0095215735731612682542, 0.0088440868455207238852, 
    0.0081602240207119866637, 0.0074704781259855639451, 0.0067753464299597942292, 
    0.0060753300841176930631, 0.0053709337615044683986, 0.0046626652928861844964, 
    0.0039510353006318838480, 0.0032365568305831178424, 0.0025197449821762878724, 
    0.0018011165370844582048, 0.0010811895866463693142, 0.00036048315835125474093
};
IntegratorXX::GaussChebyshev1<double,double> quad(117);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 117; i++) {
    const std::string msg = "GaussChebyshev1 N = 117 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

TEST_CASE("126 point GaussChebyshev1", "[1d-quad]") {
std::array<double,126> ref_pts = {
    -0.99992229248097481451, -0.99930070478839855270, -0.99805791580453187662, 
    -0.99619469809174553230, -0.99371220989324258353, -0.99061199441305274209, 
    -0.98689597885672118993, -0.98256647323328823615, -0.97762616891930454088, 
    -0.97207813698577456631, -0.96592582628906828675, -0.95917306132698791583, 
    -0.95182403986132239698, -0.94388333030836756290, -0.93535586889903411044, 
    -0.92624695661030877037, -0.91656225586997618582, -0.90630778703664996324, 
    -0.89548992465730103510, -0.88411539350460978945, -0.87219126439660529096, 
    -0.85972494980119025615, -0.84672419922828416835, -0.83319709441244894199, 
    -0.81915204428899178968, -0.80459777976666832735, -0.78954334830023539322, 
    -0.77399810826622747740, -0.75797172314545298179, -0.74147415551582667998, 
    -0.72451566085927264894, -0.70710678118654752440, -0.68925833848394711932, 
    -0.67098142798597016862, -0.65228741127812115437, -0.63318790923413975776, 
    -0.61369479479204740996, -0.59382018557350161165, -0.57357643635104609611, 
    -0.55297613136793946439, -0.53203207651533656356, -0.51075729137168555367, 
    -0.48916500110928926084, -0.46726862827306198914, -0.44508178443659241224, 
    -0.42261826174069943619, -0.39989202431974097188, -0.37691719962100533213, 
    -0.35370806962258143217, -0.33027906195516708177, -0.30664474093333437226, 
    -0.28281979850182744699, -0.25881904510252076235, -0.23465740046771526688, 
    -0.21034988434549571701, -0.18591160716291458111, -0.16135776063280663304, 
    -0.13670360831007337715, -0.11196447610330785847, -0.087155742747658173558, 
    -0.062292830244852093115, -0.037391194276325621096, -0.012466314595415034802, 
    0.012466314595415034802, 0.037391194276325621096, 0.062292830244852093115, 
    0.087155742747658173558, 0.11196447610330785847, 0.13670360831007337715, 
    0.16135776063280663304, 0.18591160716291458111, 0.21034988434549571701, 
    0.23465740046771526688, 0.25881904510252076235, 0.28281979850182744699, 
    0.30664474093333437226, 0.33027906195516708177, 0.35370806962258143217, 
    0.37691719962100533213, 0.39989202431974097188, 0.42261826174069943619, 
    0.44508178443659241224, 0.46726862827306198914, 0.48916500110928926084, 
    0.51075729137168555367, 0.53203207651533656356, 0.55297613136793946439, 
    0.57357643635104609611, 0.59382018557350161165, 0.61369479479204740996, 
    0.63318790923413975776, 0.65228741127812115437, 0.67098142798597016862, 
    0.68925833848394711932, 0.70710678118654752440, 0.72451566085927264894, 
    0.74147415551582667998, 0.75797172314545298179, 0.77399810826622747740, 
    0.78954334830023539322, 0.80459777976666832735, 0.81915204428899178968, 
    0.83319709441244894199, 0.84672419922828416835, 0.85972494980119025615, 
    0.87219126439660529096, 0.88411539350460978945, 0.89548992465730103510, 
    0.90630778703664996324, 0.91656225586997618582, 0.92624695661030877037, 
    0.93535586889903411044, 0.94388333030836756290, 0.95182403986132239698, 
    0.95917306132698791583, 0.96592582628906828675, 0.97207813698577456631, 
    0.97762616891930454088, 0.98256647323328823615, 0.98689597885672118993, 
    0.99061199441305274209, 0.99371220989324258353, 0.99619469809174553230, 
    0.99805791580453187662, 0.99930070478839855270, 0.99992229248097481451
};
std::array<double,126> ref_wgt = {
    0.00031082605039916737127, 0.00093228493053534362434, 0.0015531642687979636259, 
    0.0021730781042397207839, 0.0027916410761046184771, 0.0034084686633820883446, 
    0.0040231774238390925819, 0.0046353852323816192931, 0.0052447115185973968070, 
    0.0058507775033321618595, 0.0064532064341524173140, 0.0070516238195483072968, 
    0.0076456576617310208055, 0.0082349386878800085479, 0.0088191005796962614132, 
    0.0093977802011189519975, 0.0099706178240638823190, 0.010537257352043410580, 
    0.011097346541528846775, 0.011650537220917710321, 0.012196485506969731762, 
    0.012734852018577054163, 0.013265302087735746915, 0.013787505967587484479, 
    0.014301139037402063875, 0.014805882004373336389, 0.015301421102103109892, 
    0.015787448285649637042, 0.016263661423019440182, 0.016729764482983434747, 
    0.017185467719100597906, 0.017630487849834786695, 0.018064548234652738562, 
    0.018487379045993785448, 0.018898717437004378851, 0.019298307704933156047, 
    0.019685901450084975221, 0.020061257730235107950, 0.020424143210407599621, 
    0.020774332307924690163, 0.021111607332637127148, 0.021435758622248199061, 
    0.021746584672647366433, 0.022043892263172470772, 0.022327496576722653789, 
    0.022597221314647320405, 0.022852898806339726427, 0.023094370113467063565, 
    0.023321485128772248628, 0.023534102669385998144, 0.023732090564591182255, 
    0.023915325737984900421, 0.024083694283987204008, 0.024237091538648905202, 
    0.024375422144714455553, 0.024498600110899448730, 0.024606548865345898455, 
    0.024699201303222061890, 0.024776499828437218708, 0.024838396389445474455, 
    0.024884852509116331254, 0.024915839308653457236, 0.024931337525546785926, 
    0.024931337525546785926, 0.024915839308653457236, 0.024884852509116331254, 
    0.024838396389445474455, 0.024776499828437218708, 0.024699201303222061890, 
    0.024606548865345898455, 0.024498600110899448730, 0.024375422144714455553, 
    0.024237091538648905202, 0.024083694283987204008, 0.023915325737984900421, 
    0.023732090564591182255, 0.023534102669385998144, 0.023321485128772248628, 
    0.023094370113467063565, 0.022852898806339726427, 0.022597221314647320405, 
    0.022327496576722653789, 0.022043892263172470772, 0.021746584672647366433, 
    0.021435758622248199061, 0.021111607332637127148, 0.020774332307924690163, 
    0.020424143210407599621, 0.020061257730235107950, 0.019685901450084975221, 
    0.019298307704933156047, 0.018898717437004378851, 0.018487379045993785448, 
    0.018064548234652738562, 0.017630487849834786695, 0.017185467719100597906, 
    0.016729764482983434747, 0.016263661423019440182, 0.015787448285649637042, 
    0.015301421102103109892, 0.014805882004373336389, 0.014301139037402063875, 
    0.013787505967587484479, 0.013265302087735746915, 0.012734852018577054163, 
    0.012196485506969731762, 0.011650537220917710321, 0.011097346541528846775, 
    0.010537257352043410580, 0.0099706178240638823190, 0.0093977802011189519975, 
    0.0088191005796962614132, 0.0082349386878800085479, 0.0076456576617310208055, 
    0.0070516238195483072968, 0.0064532064341524173140, 0.0058507775033321618595, 
    0.0052447115185973968070, 0.0046353852323816192931, 0.0040231774238390925819, 
    0.0034084686633820883446, 0.0027916410761046184771, 0.0021730781042397207839, 
    0.0015531642687979636259, 0.00093228493053534362434, 0.00031082605039916737127
};
IntegratorXX::GaussChebyshev1<double,double> quad(126);
const auto & pts = quad.points();
const auto & wgt = quad.weights();
for(auto i = 0ul; i < 126; i++) {
    const std::string msg = "GaussChebyshev1 N = 126 IPT = " + std::to_string(i);
    REQUIRE_THAT(pts[i], IntegratorXX::Matchers::WithinAbs(msg + " (POINTS)", ref_pts[i],x_tolerance));
    REQUIRE_THAT(wgt[i], IntegratorXX::Matchers::WithinAbs(msg + " (WEIGHTS)", ref_wgt[i],w_tolerance));
    }
    }

