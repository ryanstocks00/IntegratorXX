// clang-format off
#include "catch2/catch_all.hpp"
#include <integratorxx/quadratures/radial/muraknowles.hpp>
#include <numeric>
#include <vector>
// clang-format on

const double x_tolerance = std::numeric_limits<double>::epsilon();
const double w_tolerance = std::numeric_limits<double>::epsilon();

// Reference data provided by Peter Knowles
// https://github.com/wavefunction91/IntegratorXX/pull/27#discussion_r1260345076
// ALPHA = 7.0
// M = 3
// NPTS = 48
TEST_CASE("48 point MuraKnowles", "[1d-quad]") {
  std::array<double, 48> ref_pts = {
      5.9499271133939913E-005, 4.7600833032953915E-004, 1.6066578611874361E-003,
      3.8089732866334377E-003, 7.4413311256047504E-003, 1.2863600152286464E-002,
      2.0437970723343253E-002, 3.0529977777593031E-002, 4.3509725746882791E-002,
      5.9753327005997357E-002, 7.9644569620570760E-002, 0.10357683514824530,
      0.13195529327830460,     0.16519940738611444,     0.20374579393428979,
      0.24805148947543415,     0.29859769233640943,     0.35589406260236178,
      0.42048368472012887,     0.49294882318131050,     0.57391763505319449,
      0.66407204595981006,     0.76415705172765447,     0.87499178083047879,
      0.99748274937600856,     1.1326398697743505,      1.2815959495630309,
      1.4456306574120197,      1.6262002677869758,      1.8249749675453268,
      2.0438861838399740,      2.2851873784253796,      2.5515332181111825,
      2.8460842535535971,      3.1726476906379575,      3.5358703430273275,
      3.9415088946346315,      4.3968179569776069,      4.9111235220893743,
      5.4966995004301378,      6.1701626127089160,      6.9548035249514397,
      7.8847270471719106,      9.0128012057250508,      10.427589422901853,
      12.295111781246881,      14.988083164786680,      19.695799083317340};

  std::array<double, 48> ref_wgt = {
      6.3191408757371128E-013, 1.6178925855460011E-010, 4.1478214302682156E-009,
      4.1457509371301411E-008, 2.4736257856667049E-007, 1.0652626596586621E-006,
      3.6641284849845252E-006, 1.0694442455644551E-005, 2.7541538616163128E-005,
      6.4278015117145217E-005, 1.3857027486190222E-004, 2.7986264953446042E-004,
      5.3525184281221503E-004, 9.7758247883188328E-004, 1.7164520965350302E-003,
      2.9130257653514745E-003, 4.7998471771280651E-003, 7.7072235182964691E-003,
      1.2098296752658244E-002, 1.8615653176199027E-002, 2.8143351896444287E-002,
      4.1889696901313278E-002, 6.1498123098954999E-002, 8.9196494268593482E-002,
      0.12799934660813353,     0.18198381348671958,     0.25666916599665018,
      0.35954374153109814,     0.50080416940484207,     0.69440463378479145,
      0.95956585458830923,     1.3229773146815327,      1.8220646710507786,
      2.5099284939617785,      3.4629679021480624,      4.7929337979063913,
      6.6665154642672082,      9.3381941641618038,      13.207427859666060,
      18.922636048645305,      27.580468647622130,      41.132941288449700,
      63.288684869795212,      101.72526373304323,      174.33040888875871,
      330.69364765060254,      753.72105349957747,      2659.6767864598341};

  IntegratorXX::MuraKnowlesRadialTraits traits{48, 7.0};
  IntegratorXX::MuraKnowles<double, double> quad(traits);

  const auto& pts = quad.points();
  const auto& wgt = quad.weights();
  for(auto i = 0ul; i < 2; i++) {
    REQUIRE_THAT(pts[i], Catch::Matchers::WithinAbs(ref_pts[i], x_tolerance));
    // Reference data contains the spherical Jacobian (r^2)
    const auto rsq = pts[i] * pts[i];
    REQUIRE_THAT(rsq * wgt[i],
                 Catch::Matchers::WithinAbs(ref_wgt[i], w_tolerance));
  }
}
